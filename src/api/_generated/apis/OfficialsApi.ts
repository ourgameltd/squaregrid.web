/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Official,
} from '../models/index';
import {
    OfficialFromJSON,
    OfficialToJSON,
} from '../models/index';

export interface AddOfficialRequest {
    official?: Official;
}

export interface DeleteOfficialRequest {
    id?: string;
}

export interface FindOfficialRequest {
    id?: string;
}

export interface SearchOfficialsRequest {
    page?: string;
    take?: string;
}

export interface UpdateOfficialRequest {
    id?: string;
    official?: Official;
}

/**
 * 
 */
export class OfficialsApi extends runtime.BaseAPI {

    /**
     * Add a new official to the databsse
     * Add a officials
     */
    async addOfficialRaw(requestParameters: AddOfficialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Official>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/official`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OfficialToJSON(requestParameters.official),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialFromJSON(jsonValue));
    }

    /**
     * Add a new official to the databsse
     * Add a officials
     */
    async addOfficial(requestParameters: AddOfficialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Official> {
        const response = await this.addOfficialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a official from its database ID.
     * Delete a official
     */
    async deleteOfficialRaw(requestParameters: DeleteOfficialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/official/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a official from its database ID.
     * Delete a official
     */
    async deleteOfficial(requestParameters: DeleteOfficialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOfficialRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a official from its database ID.
     * Get a official
     */
    async findOfficialRaw(requestParameters: FindOfficialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Official>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/official/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialFromJSON(jsonValue));
    }

    /**
     * Gets a official from its database ID.
     * Get a official
     */
    async findOfficial(requestParameters: FindOfficialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Official> {
        const response = await this.findOfficialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for officials paged
     * Search all officials
     */
    async searchOfficialsRaw(requestParameters: SearchOfficialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Official>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/official`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfficialFromJSON));
    }

    /**
     * Search for officials paged
     * Search all officials
     */
    async searchOfficials(requestParameters: SearchOfficialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Official>> {
        const response = await this.searchOfficialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a official in the database
     * Update a officials
     */
    async updateOfficialRaw(requestParameters: UpdateOfficialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Official>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/official/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OfficialToJSON(requestParameters.official),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialFromJSON(jsonValue));
    }

    /**
     * Update a official in the database
     * Update a officials
     */
    async updateOfficial(requestParameters: UpdateOfficialRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Official> {
        const response = await this.updateOfficialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
