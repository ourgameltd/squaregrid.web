/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FixtureOfficialAppointment,
} from '../models/index';
import {
    FixtureOfficialAppointmentFromJSON,
    FixtureOfficialAppointmentToJSON,
} from '../models/index';

export interface AddFixtureOfficialAppointmentRequest {
    fixtureOfficialAppointment?: FixtureOfficialAppointment;
}

export interface DeleteFixtureOfficialAppointmentRequest {
    id?: string;
}

export interface FindFixtureOfficialAppointmentRequest {
    id?: string;
}

export interface SearchFixtureOfficialAppointmentsRequest {
    page?: string;
    take?: string;
}

export interface UpdateFixtureOfficialAppointmentRequest {
    id?: string;
    fixtureOfficialAppointment?: FixtureOfficialAppointment;
}

/**
 * 
 */
export class FixtureOfficialAppointmentsApi extends runtime.BaseAPI {

    /**
     * Add a new fixtureofficialappointment to the databsse
     * Add a fixtureofficialappointments
     */
    async addFixtureOfficialAppointmentRaw(requestParameters: AddFixtureOfficialAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureOfficialAppointment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureofficialappointment`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureOfficialAppointmentToJSON(requestParameters.fixtureOfficialAppointment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureOfficialAppointmentFromJSON(jsonValue));
    }

    /**
     * Add a new fixtureofficialappointment to the databsse
     * Add a fixtureofficialappointments
     */
    async addFixtureOfficialAppointment(requestParameters: AddFixtureOfficialAppointmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureOfficialAppointment> {
        const response = await this.addFixtureOfficialAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a fixtureofficialappointment from its database ID.
     * Delete a fixtureofficialappointment
     */
    async deleteFixtureOfficialAppointmentRaw(requestParameters: DeleteFixtureOfficialAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureofficialappointment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fixtureofficialappointment from its database ID.
     * Delete a fixtureofficialappointment
     */
    async deleteFixtureOfficialAppointment(requestParameters: DeleteFixtureOfficialAppointmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFixtureOfficialAppointmentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a fixtureofficialappointment from its database ID.
     * Get a fixtureofficialappointment
     */
    async findFixtureOfficialAppointmentRaw(requestParameters: FindFixtureOfficialAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureOfficialAppointment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureofficialappointment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureOfficialAppointmentFromJSON(jsonValue));
    }

    /**
     * Gets a fixtureofficialappointment from its database ID.
     * Get a fixtureofficialappointment
     */
    async findFixtureOfficialAppointment(requestParameters: FindFixtureOfficialAppointmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureOfficialAppointment> {
        const response = await this.findFixtureOfficialAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fixtureofficialappointments paged
     * Search all fixtureofficialappointments
     */
    async searchFixtureOfficialAppointmentsRaw(requestParameters: SearchFixtureOfficialAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FixtureOfficialAppointment>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureofficialappointment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FixtureOfficialAppointmentFromJSON));
    }

    /**
     * Search for fixtureofficialappointments paged
     * Search all fixtureofficialappointments
     */
    async searchFixtureOfficialAppointments(requestParameters: SearchFixtureOfficialAppointmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FixtureOfficialAppointment>> {
        const response = await this.searchFixtureOfficialAppointmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a fixtureofficialappointment in the database
     * Update a fixtureofficialappointments
     */
    async updateFixtureOfficialAppointmentRaw(requestParameters: UpdateFixtureOfficialAppointmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureOfficialAppointment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureofficialappointment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureOfficialAppointmentToJSON(requestParameters.fixtureOfficialAppointment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureOfficialAppointmentFromJSON(jsonValue));
    }

    /**
     * Update a fixtureofficialappointment in the database
     * Update a fixtureofficialappointments
     */
    async updateFixtureOfficialAppointment(requestParameters: UpdateFixtureOfficialAppointmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureOfficialAppointment> {
        const response = await this.updateFixtureOfficialAppointmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
