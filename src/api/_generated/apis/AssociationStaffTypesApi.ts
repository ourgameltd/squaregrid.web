/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociationStaffType,
} from '../models/index';
import {
    AssociationStaffTypeFromJSON,
    AssociationStaffTypeToJSON,
} from '../models/index';

export interface AddAssociationStaffTypeRequest {
    associationStaffType?: AssociationStaffType;
}

export interface DeleteAssociationStaffTypeRequest {
    id?: string;
}

export interface FindAssociationStaffTypeRequest {
    id?: string;
}

export interface SearchAssociationStaffTypesRequest {
    page?: string;
    take?: string;
}

export interface UpdateAssociationStaffTypeRequest {
    id?: string;
    associationStaffType?: AssociationStaffType;
}

/**
 * 
 */
export class AssociationStaffTypesApi extends runtime.BaseAPI {

    /**
     * Add a new associationstafftype to the databsse
     * Add a associationstafftypes
     */
    async addAssociationStaffTypeRaw(requestParameters: AddAssociationStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationStaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationstafftype`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssociationStaffTypeToJSON(requestParameters.associationStaffType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationStaffTypeFromJSON(jsonValue));
    }

    /**
     * Add a new associationstafftype to the databsse
     * Add a associationstafftypes
     */
    async addAssociationStaffType(requestParameters: AddAssociationStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationStaffType> {
        const response = await this.addAssociationStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a associationstafftype from its database ID.
     * Delete a associationstafftype
     */
    async deleteAssociationStaffTypeRaw(requestParameters: DeleteAssociationStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationstafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a associationstafftype from its database ID.
     * Delete a associationstafftype
     */
    async deleteAssociationStaffType(requestParameters: DeleteAssociationStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssociationStaffTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a associationstafftype from its database ID.
     * Get a associationstafftype
     */
    async findAssociationStaffTypeRaw(requestParameters: FindAssociationStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationStaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationstafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationStaffTypeFromJSON(jsonValue));
    }

    /**
     * Gets a associationstafftype from its database ID.
     * Get a associationstafftype
     */
    async findAssociationStaffType(requestParameters: FindAssociationStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationStaffType> {
        const response = await this.findAssociationStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for associationstafftypes paged
     * Search all associationstafftypes
     */
    async searchAssociationStaffTypesRaw(requestParameters: SearchAssociationStaffTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssociationStaffType>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationstafftype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssociationStaffTypeFromJSON));
    }

    /**
     * Search for associationstafftypes paged
     * Search all associationstafftypes
     */
    async searchAssociationStaffTypes(requestParameters: SearchAssociationStaffTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssociationStaffType>> {
        const response = await this.searchAssociationStaffTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a associationstafftype in the database
     * Update a associationstafftypes
     */
    async updateAssociationStaffTypeRaw(requestParameters: UpdateAssociationStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationStaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationstafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssociationStaffTypeToJSON(requestParameters.associationStaffType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationStaffTypeFromJSON(jsonValue));
    }

    /**
     * Update a associationstafftype in the database
     * Update a associationstafftypes
     */
    async updateAssociationStaffType(requestParameters: UpdateAssociationStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationStaffType> {
        const response = await this.updateAssociationStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
