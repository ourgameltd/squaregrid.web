/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TeamFixtureResult,
} from '../models/index';
import {
    TeamFixtureResultFromJSON,
    TeamFixtureResultToJSON,
} from '../models/index';

export interface AddTeamFixtureResultRequest {
    teamFixtureResult?: TeamFixtureResult;
}

export interface DeleteTeamFixtureResultRequest {
    id?: string;
}

export interface FindTeamFixtureResultRequest {
    id?: string;
}

export interface SearchTeamFixtureResultsRequest {
    page?: string;
    take?: string;
}

export interface UpdateTeamFixtureResultRequest {
    id?: string;
    teamFixtureResult?: TeamFixtureResult;
}

/**
 * 
 */
export class TeamFixtureResultsApi extends runtime.BaseAPI {

    /**
     * Add a new teamfixtureresult to the databsse
     * Add a teamfixtureresults
     */
    async addTeamFixtureResultRaw(requestParameters: AddTeamFixtureResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamFixtureResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamfixtureresult`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamFixtureResultToJSON(requestParameters.teamFixtureResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFixtureResultFromJSON(jsonValue));
    }

    /**
     * Add a new teamfixtureresult to the databsse
     * Add a teamfixtureresults
     */
    async addTeamFixtureResult(requestParameters: AddTeamFixtureResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamFixtureResult> {
        const response = await this.addTeamFixtureResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a teamfixtureresult from its database ID.
     * Delete a teamfixtureresult
     */
    async deleteTeamFixtureResultRaw(requestParameters: DeleteTeamFixtureResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamfixtureresult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a teamfixtureresult from its database ID.
     * Delete a teamfixtureresult
     */
    async deleteTeamFixtureResult(requestParameters: DeleteTeamFixtureResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamFixtureResultRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a teamfixtureresult from its database ID.
     * Get a teamfixtureresult
     */
    async findTeamFixtureResultRaw(requestParameters: FindTeamFixtureResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamFixtureResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamfixtureresult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFixtureResultFromJSON(jsonValue));
    }

    /**
     * Gets a teamfixtureresult from its database ID.
     * Get a teamfixtureresult
     */
    async findTeamFixtureResult(requestParameters: FindTeamFixtureResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamFixtureResult> {
        const response = await this.findTeamFixtureResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for teamfixtureresults paged
     * Search all teamfixtureresults
     */
    async searchTeamFixtureResultsRaw(requestParameters: SearchTeamFixtureResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamFixtureResult>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamfixtureresult`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFixtureResultFromJSON));
    }

    /**
     * Search for teamfixtureresults paged
     * Search all teamfixtureresults
     */
    async searchTeamFixtureResults(requestParameters: SearchTeamFixtureResultsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamFixtureResult>> {
        const response = await this.searchTeamFixtureResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a teamfixtureresult in the database
     * Update a teamfixtureresults
     */
    async updateTeamFixtureResultRaw(requestParameters: UpdateTeamFixtureResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamFixtureResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamfixtureresult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamFixtureResultToJSON(requestParameters.teamFixtureResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFixtureResultFromJSON(jsonValue));
    }

    /**
     * Update a teamfixtureresult in the database
     * Update a teamfixtureresults
     */
    async updateTeamFixtureResult(requestParameters: UpdateTeamFixtureResultRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamFixtureResult> {
        const response = await this.updateTeamFixtureResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
