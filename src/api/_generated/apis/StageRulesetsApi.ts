/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StageRuleset,
} from '../models/index';
import {
    StageRulesetFromJSON,
    StageRulesetToJSON,
} from '../models/index';

export interface AddStageRulesetRequest {
    stageRuleset?: StageRuleset;
}

export interface DeleteStageRulesetRequest {
    id?: string;
}

export interface FindStageRulesetRequest {
    id?: string;
}

export interface SearchStageRulesetsRequest {
    page?: string;
    take?: string;
}

export interface UpdateStageRulesetRequest {
    id?: string;
    stageRuleset?: StageRuleset;
}

/**
 * 
 */
export class StageRulesetsApi extends runtime.BaseAPI {

    /**
     * Add a new stageruleset to the databsse
     * Add a stagerulesets
     */
    async addStageRulesetRaw(requestParameters: AddStageRulesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageRuleset>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageruleset`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StageRulesetToJSON(requestParameters.stageRuleset),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageRulesetFromJSON(jsonValue));
    }

    /**
     * Add a new stageruleset to the databsse
     * Add a stagerulesets
     */
    async addStageRuleset(requestParameters: AddStageRulesetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageRuleset> {
        const response = await this.addStageRulesetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a stageruleset from its database ID.
     * Delete a stageruleset
     */
    async deleteStageRulesetRaw(requestParameters: DeleteStageRulesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageruleset/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stageruleset from its database ID.
     * Delete a stageruleset
     */
    async deleteStageRuleset(requestParameters: DeleteStageRulesetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStageRulesetRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a stageruleset from its database ID.
     * Get a stageruleset
     */
    async findStageRulesetRaw(requestParameters: FindStageRulesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageRuleset>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageruleset/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageRulesetFromJSON(jsonValue));
    }

    /**
     * Gets a stageruleset from its database ID.
     * Get a stageruleset
     */
    async findStageRuleset(requestParameters: FindStageRulesetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageRuleset> {
        const response = await this.findStageRulesetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for stagerulesets paged
     * Search all stagerulesets
     */
    async searchStageRulesetsRaw(requestParameters: SearchStageRulesetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StageRuleset>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageruleset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StageRulesetFromJSON));
    }

    /**
     * Search for stagerulesets paged
     * Search all stagerulesets
     */
    async searchStageRulesets(requestParameters: SearchStageRulesetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StageRuleset>> {
        const response = await this.searchStageRulesetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a stageruleset in the database
     * Update a stagerulesets
     */
    async updateStageRulesetRaw(requestParameters: UpdateStageRulesetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageRuleset>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageruleset/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StageRulesetToJSON(requestParameters.stageRuleset),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageRulesetFromJSON(jsonValue));
    }

    /**
     * Update a stageruleset in the database
     * Update a stagerulesets
     */
    async updateStageRuleset(requestParameters: UpdateStageRulesetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageRuleset> {
        const response = await this.updateStageRulesetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
