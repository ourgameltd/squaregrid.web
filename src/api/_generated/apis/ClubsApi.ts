/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Club,
} from '../models/index';
import {
    ClubFromJSON,
    ClubToJSON,
} from '../models/index';

export interface AddClubRequest {
    club?: Club;
}

export interface DeleteClubRequest {
    id?: string;
}

export interface FindClubRequest {
    id?: string;
}

export interface SearchClubsRequest {
    page?: string;
    take?: string;
}

export interface UpdateClubRequest {
    id?: string;
    club?: Club;
}

/**
 * 
 */
export class ClubsApi extends runtime.BaseAPI {

    /**
     * Add a new club to the databsse
     * Add a clubs
     */
    async addClubRaw(requestParameters: AddClubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Club>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/club`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClubToJSON(requestParameters.club),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClubFromJSON(jsonValue));
    }

    /**
     * Add a new club to the databsse
     * Add a clubs
     */
    async addClub(requestParameters: AddClubRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Club> {
        const response = await this.addClubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a club from its database ID.
     * Delete a club
     */
    async deleteClubRaw(requestParameters: DeleteClubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a club from its database ID.
     * Delete a club
     */
    async deleteClub(requestParameters: DeleteClubRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClubRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a club from its database ID.
     * Get a club
     */
    async findClubRaw(requestParameters: FindClubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Club>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClubFromJSON(jsonValue));
    }

    /**
     * Gets a club from its database ID.
     * Get a club
     */
    async findClub(requestParameters: FindClubRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Club> {
        const response = await this.findClubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for clubs paged
     * Search all clubs
     */
    async searchClubsRaw(requestParameters: SearchClubsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Club>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/club`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClubFromJSON));
    }

    /**
     * Search for clubs paged
     * Search all clubs
     */
    async searchClubs(requestParameters: SearchClubsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Club>> {
        const response = await this.searchClubsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a club in the database
     * Update a clubs
     */
    async updateClubRaw(requestParameters: UpdateClubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Club>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClubToJSON(requestParameters.club),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClubFromJSON(jsonValue));
    }

    /**
     * Update a club in the database
     * Update a clubs
     */
    async updateClub(requestParameters: UpdateClubRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Club> {
        const response = await this.updateClubRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
