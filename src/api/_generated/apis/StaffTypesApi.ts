/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StaffType,
} from '../models/index';
import {
    StaffTypeFromJSON,
    StaffTypeToJSON,
} from '../models/index';

export interface AddStaffTypeRequest {
    staffType?: StaffType;
}

export interface DeleteStaffTypeRequest {
    id?: string;
}

export interface FindStaffTypeRequest {
    id?: string;
}

export interface SearchStaffTypesRequest {
    page?: string;
    take?: string;
}

export interface UpdateStaffTypeRequest {
    id?: string;
    staffType?: StaffType;
}

/**
 * 
 */
export class StaffTypesApi extends runtime.BaseAPI {

    /**
     * Add a new stafftype to the databsse
     * Add a stafftypes
     */
    async addStaffTypeRaw(requestParameters: AddStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stafftype`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StaffTypeToJSON(requestParameters.staffType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffTypeFromJSON(jsonValue));
    }

    /**
     * Add a new stafftype to the databsse
     * Add a stafftypes
     */
    async addStaffType(requestParameters: AddStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaffType> {
        const response = await this.addStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a stafftype from its database ID.
     * Delete a stafftype
     */
    async deleteStaffTypeRaw(requestParameters: DeleteStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stafftype from its database ID.
     * Delete a stafftype
     */
    async deleteStaffType(requestParameters: DeleteStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStaffTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a stafftype from its database ID.
     * Get a stafftype
     */
    async findStaffTypeRaw(requestParameters: FindStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffTypeFromJSON(jsonValue));
    }

    /**
     * Gets a stafftype from its database ID.
     * Get a stafftype
     */
    async findStaffType(requestParameters: FindStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaffType> {
        const response = await this.findStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for stafftypes paged
     * Search all stafftypes
     */
    async searchStaffTypesRaw(requestParameters: SearchStaffTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StaffType>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stafftype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaffTypeFromJSON));
    }

    /**
     * Search for stafftypes paged
     * Search all stafftypes
     */
    async searchStaffTypes(requestParameters: SearchStaffTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StaffType>> {
        const response = await this.searchStaffTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a stafftype in the database
     * Update a stafftypes
     */
    async updateStaffTypeRaw(requestParameters: UpdateStaffTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaffType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stafftype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaffTypeToJSON(requestParameters.staffType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffTypeFromJSON(jsonValue));
    }

    /**
     * Update a stafftype in the database
     * Update a stafftypes
     */
    async updateStaffType(requestParameters: UpdateStaffTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaffType> {
        const response = await this.updateStaffTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
