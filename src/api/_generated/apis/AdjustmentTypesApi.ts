/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentType,
} from '../models/index';
import {
    AdjustmentTypeFromJSON,
    AdjustmentTypeToJSON,
} from '../models/index';

export interface AddAdjustmentTypeRequest {
    adjustmentType?: AdjustmentType;
}

export interface DeleteAdjustmentTypeRequest {
    id?: string;
}

export interface FindAdjustmentTypeRequest {
    id?: string;
}

export interface SearchAdjustmentTypesRequest {
    page?: string;
    take?: string;
}

export interface UpdateAdjustmentTypeRequest {
    id?: string;
    adjustmentType?: AdjustmentType;
}

/**
 * 
 */
export class AdjustmentTypesApi extends runtime.BaseAPI {

    /**
     * Add a new adjustmenttype to the databsse
     * Add a adjustmenttypes
     */
    async addAdjustmentTypeRaw(requestParameters: AddAdjustmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adjustmenttype`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentTypeToJSON(requestParameters.adjustmentType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentTypeFromJSON(jsonValue));
    }

    /**
     * Add a new adjustmenttype to the databsse
     * Add a adjustmenttypes
     */
    async addAdjustmentType(requestParameters: AddAdjustmentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentType> {
        const response = await this.addAdjustmentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a adjustmenttype from its database ID.
     * Delete a adjustmenttype
     */
    async deleteAdjustmentTypeRaw(requestParameters: DeleteAdjustmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adjustmenttype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a adjustmenttype from its database ID.
     * Delete a adjustmenttype
     */
    async deleteAdjustmentType(requestParameters: DeleteAdjustmentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdjustmentTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a adjustmenttype from its database ID.
     * Get a adjustmenttype
     */
    async findAdjustmentTypeRaw(requestParameters: FindAdjustmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adjustmenttype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentTypeFromJSON(jsonValue));
    }

    /**
     * Gets a adjustmenttype from its database ID.
     * Get a adjustmenttype
     */
    async findAdjustmentType(requestParameters: FindAdjustmentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentType> {
        const response = await this.findAdjustmentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for adjustmenttypes paged
     * Search all adjustmenttypes
     */
    async searchAdjustmentTypesRaw(requestParameters: SearchAdjustmentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdjustmentType>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adjustmenttype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdjustmentTypeFromJSON));
    }

    /**
     * Search for adjustmenttypes paged
     * Search all adjustmenttypes
     */
    async searchAdjustmentTypes(requestParameters: SearchAdjustmentTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdjustmentType>> {
        const response = await this.searchAdjustmentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a adjustmenttype in the database
     * Update a adjustmenttypes
     */
    async updateAdjustmentTypeRaw(requestParameters: UpdateAdjustmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adjustmenttype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentTypeToJSON(requestParameters.adjustmentType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentTypeFromJSON(jsonValue));
    }

    /**
     * Update a adjustmenttype in the database
     * Update a adjustmenttypes
     */
    async updateAdjustmentType(requestParameters: UpdateAdjustmentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentType> {
        const response = await this.updateAdjustmentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
