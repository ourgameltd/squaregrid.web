/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StageTeam,
} from '../models/index';
import {
    StageTeamFromJSON,
    StageTeamToJSON,
} from '../models/index';

export interface AddStageTeamRequest {
    stageTeam?: StageTeam;
}

export interface DeleteStageTeamRequest {
    id?: string;
}

export interface FindStageTeamRequest {
    id?: string;
}

export interface SearchStageTeamsRequest {
    page?: string;
    take?: string;
}

export interface UpdateStageTeamRequest {
    id?: string;
    stageTeam?: StageTeam;
}

/**
 * 
 */
export class StageTeamsApi extends runtime.BaseAPI {

    /**
     * Add a new stageteam to the databsse
     * Add a stageteams
     */
    async addStageTeamRaw(requestParameters: AddStageTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageteam`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StageTeamToJSON(requestParameters.stageTeam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageTeamFromJSON(jsonValue));
    }

    /**
     * Add a new stageteam to the databsse
     * Add a stageteams
     */
    async addStageTeam(requestParameters: AddStageTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageTeam> {
        const response = await this.addStageTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a stageteam from its database ID.
     * Delete a stageteam
     */
    async deleteStageTeamRaw(requestParameters: DeleteStageTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stageteam from its database ID.
     * Delete a stageteam
     */
    async deleteStageTeam(requestParameters: DeleteStageTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStageTeamRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a stageteam from its database ID.
     * Get a stageteam
     */
    async findStageTeamRaw(requestParameters: FindStageTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageTeamFromJSON(jsonValue));
    }

    /**
     * Gets a stageteam from its database ID.
     * Get a stageteam
     */
    async findStageTeam(requestParameters: FindStageTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageTeam> {
        const response = await this.findStageTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for stageteams paged
     * Search all stageteams
     */
    async searchStageTeamsRaw(requestParameters: SearchStageTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StageTeam>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageteam`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StageTeamFromJSON));
    }

    /**
     * Search for stageteams paged
     * Search all stageteams
     */
    async searchStageTeams(requestParameters: SearchStageTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StageTeam>> {
        const response = await this.searchStageTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a stageteam in the database
     * Update a stageteams
     */
    async updateStageTeamRaw(requestParameters: UpdateStageTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StageTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stageteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StageTeamToJSON(requestParameters.stageTeam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageTeamFromJSON(jsonValue));
    }

    /**
     * Update a stageteam in the database
     * Update a stageteams
     */
    async updateStageTeam(requestParameters: UpdateStageTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StageTeam> {
        const response = await this.updateStageTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
