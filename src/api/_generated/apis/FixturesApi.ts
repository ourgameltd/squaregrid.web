/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Fixture,
} from '../models/index';
import {
    FixtureFromJSON,
    FixtureToJSON,
} from '../models/index';

export interface AddFixtureRequest {
    fixture?: Fixture;
}

export interface DeleteFixtureRequest {
    id?: string;
}

export interface FindFixtureRequest {
    id?: string;
}

export interface SearchFixturesRequest {
    page?: string;
    take?: string;
}

export interface UpdateFixtureRequest {
    id?: string;
    fixture?: Fixture;
}

/**
 * 
 */
export class FixturesApi extends runtime.BaseAPI {

    /**
     * Add a new fixture to the databsse
     * Add a fixtures
     */
    async addFixtureRaw(requestParameters: AddFixtureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fixture>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixture`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureToJSON(requestParameters.fixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureFromJSON(jsonValue));
    }

    /**
     * Add a new fixture to the databsse
     * Add a fixtures
     */
    async addFixture(requestParameters: AddFixtureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fixture> {
        const response = await this.addFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a fixture from its database ID.
     * Delete a fixture
     */
    async deleteFixtureRaw(requestParameters: DeleteFixtureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixture/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fixture from its database ID.
     * Delete a fixture
     */
    async deleteFixture(requestParameters: DeleteFixtureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFixtureRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a fixture from its database ID.
     * Get a fixture
     */
    async findFixtureRaw(requestParameters: FindFixtureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fixture>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixture/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureFromJSON(jsonValue));
    }

    /**
     * Gets a fixture from its database ID.
     * Get a fixture
     */
    async findFixture(requestParameters: FindFixtureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fixture> {
        const response = await this.findFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fixtures paged
     * Search all fixtures
     */
    async searchFixturesRaw(requestParameters: SearchFixturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Fixture>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixture`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FixtureFromJSON));
    }

    /**
     * Search for fixtures paged
     * Search all fixtures
     */
    async searchFixtures(requestParameters: SearchFixturesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Fixture>> {
        const response = await this.searchFixturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a fixture in the database
     * Update a fixtures
     */
    async updateFixtureRaw(requestParameters: UpdateFixtureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Fixture>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixture/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureToJSON(requestParameters.fixture),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureFromJSON(jsonValue));
    }

    /**
     * Update a fixture in the database
     * Update a fixtures
     */
    async updateFixture(requestParameters: UpdateFixtureRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Fixture> {
        const response = await this.updateFixtureRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
