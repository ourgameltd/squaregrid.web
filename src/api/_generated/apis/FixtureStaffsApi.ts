/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FixtureStaff,
} from '../models/index';
import {
    FixtureStaffFromJSON,
    FixtureStaffToJSON,
} from '../models/index';

export interface AddFixtureStaffRequest {
    fixtureStaff?: FixtureStaff;
}

export interface DeleteFixtureStaffRequest {
    id?: string;
}

export interface FindFixtureStaffRequest {
    id?: string;
}

export interface SearchFixtureStaffsRequest {
    page?: string;
    take?: string;
}

export interface UpdateFixtureStaffRequest {
    id?: string;
    fixtureStaff?: FixtureStaff;
}

/**
 * 
 */
export class FixtureStaffsApi extends runtime.BaseAPI {

    /**
     * Add a new fixturestaff to the databsse
     * Add a fixturestaffs
     */
    async addFixtureStaffRaw(requestParameters: AddFixtureStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixturestaff`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureStaffToJSON(requestParameters.fixtureStaff),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureStaffFromJSON(jsonValue));
    }

    /**
     * Add a new fixturestaff to the databsse
     * Add a fixturestaffs
     */
    async addFixtureStaff(requestParameters: AddFixtureStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureStaff> {
        const response = await this.addFixtureStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a fixturestaff from its database ID.
     * Delete a fixturestaff
     */
    async deleteFixtureStaffRaw(requestParameters: DeleteFixtureStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixturestaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fixturestaff from its database ID.
     * Delete a fixturestaff
     */
    async deleteFixtureStaff(requestParameters: DeleteFixtureStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFixtureStaffRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a fixturestaff from its database ID.
     * Get a fixturestaff
     */
    async findFixtureStaffRaw(requestParameters: FindFixtureStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixturestaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureStaffFromJSON(jsonValue));
    }

    /**
     * Gets a fixturestaff from its database ID.
     * Get a fixturestaff
     */
    async findFixtureStaff(requestParameters: FindFixtureStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureStaff> {
        const response = await this.findFixtureStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fixturestaffs paged
     * Search all fixturestaffs
     */
    async searchFixtureStaffsRaw(requestParameters: SearchFixtureStaffsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FixtureStaff>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixturestaff`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FixtureStaffFromJSON));
    }

    /**
     * Search for fixturestaffs paged
     * Search all fixturestaffs
     */
    async searchFixtureStaffs(requestParameters: SearchFixtureStaffsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FixtureStaff>> {
        const response = await this.searchFixtureStaffsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a fixturestaff in the database
     * Update a fixturestaffs
     */
    async updateFixtureStaffRaw(requestParameters: UpdateFixtureStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixturestaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureStaffToJSON(requestParameters.fixtureStaff),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureStaffFromJSON(jsonValue));
    }

    /**
     * Update a fixturestaff in the database
     * Update a fixturestaffs
     */
    async updateFixtureStaff(requestParameters: UpdateFixtureStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureStaff> {
        const response = await this.updateFixtureStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
