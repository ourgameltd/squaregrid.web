/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TeamPlayer,
} from '../models/index';
import {
    TeamPlayerFromJSON,
    TeamPlayerToJSON,
} from '../models/index';

export interface AddTeamPlayerRequest {
    teamPlayer?: TeamPlayer;
}

export interface DeleteTeamPlayerRequest {
    id?: string;
}

export interface FindTeamPlayerRequest {
    id?: string;
}

export interface SearchTeamPlayersRequest {
    page?: string;
    take?: string;
}

export interface UpdateTeamPlayerRequest {
    id?: string;
    teamPlayer?: TeamPlayer;
}

/**
 * 
 */
export class TeamPlayersApi extends runtime.BaseAPI {

    /**
     * Add a new teamplayer to the databsse
     * Add a teamplayers
     */
    async addTeamPlayerRaw(requestParameters: AddTeamPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamPlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamplayer`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamPlayerToJSON(requestParameters.teamPlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPlayerFromJSON(jsonValue));
    }

    /**
     * Add a new teamplayer to the databsse
     * Add a teamplayers
     */
    async addTeamPlayer(requestParameters: AddTeamPlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamPlayer> {
        const response = await this.addTeamPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a teamplayer from its database ID.
     * Delete a teamplayer
     */
    async deleteTeamPlayerRaw(requestParameters: DeleteTeamPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a teamplayer from its database ID.
     * Delete a teamplayer
     */
    async deleteTeamPlayer(requestParameters: DeleteTeamPlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamPlayerRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a teamplayer from its database ID.
     * Get a teamplayer
     */
    async findTeamPlayerRaw(requestParameters: FindTeamPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamPlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPlayerFromJSON(jsonValue));
    }

    /**
     * Gets a teamplayer from its database ID.
     * Get a teamplayer
     */
    async findTeamPlayer(requestParameters: FindTeamPlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamPlayer> {
        const response = await this.findTeamPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for teamplayers paged
     * Search all teamplayers
     */
    async searchTeamPlayersRaw(requestParameters: SearchTeamPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamPlayer>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamplayer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamPlayerFromJSON));
    }

    /**
     * Search for teamplayers paged
     * Search all teamplayers
     */
    async searchTeamPlayers(requestParameters: SearchTeamPlayersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamPlayer>> {
        const response = await this.searchTeamPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a teamplayer in the database
     * Update a teamplayers
     */
    async updateTeamPlayerRaw(requestParameters: UpdateTeamPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamPlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamPlayerToJSON(requestParameters.teamPlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamPlayerFromJSON(jsonValue));
    }

    /**
     * Update a teamplayer in the database
     * Update a teamplayers
     */
    async updateTeamPlayer(requestParameters: UpdateTeamPlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamPlayer> {
        const response = await this.updateTeamPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
