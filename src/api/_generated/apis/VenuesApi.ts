/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Venue,
} from '../models/index';
import {
    VenueFromJSON,
    VenueToJSON,
} from '../models/index';

export interface AddVenueRequest {
    venue?: Venue;
}

export interface DeleteVenueRequest {
    id?: string;
}

export interface FindVenueRequest {
    id?: string;
}

export interface SearchVenuesRequest {
    page?: string;
    take?: string;
}

export interface UpdateVenueRequest {
    id?: string;
    venue?: Venue;
}

/**
 * 
 */
export class VenuesApi extends runtime.BaseAPI {

    /**
     * Add a new venue to the databsse
     * Add a venues
     */
    async addVenueRaw(requestParameters: AddVenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venue`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters.venue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Add a new venue to the databsse
     * Add a venues
     */
    async addVenue(requestParameters: AddVenueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.addVenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a venue from its database ID.
     * Delete a venue
     */
    async deleteVenueRaw(requestParameters: DeleteVenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venue/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a venue from its database ID.
     * Delete a venue
     */
    async deleteVenue(requestParameters: DeleteVenueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVenueRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a venue from its database ID.
     * Get a venue
     */
    async findVenueRaw(requestParameters: FindVenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venue/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Gets a venue from its database ID.
     * Get a venue
     */
    async findVenue(requestParameters: FindVenueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.findVenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for venues paged
     * Search all venues
     */
    async searchVenuesRaw(requestParameters: SearchVenuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Venue>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueFromJSON));
    }

    /**
     * Search for venues paged
     * Search all venues
     */
    async searchVenues(requestParameters: SearchVenuesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Venue>> {
        const response = await this.searchVenuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a venue in the database
     * Update a venues
     */
    async updateVenueRaw(requestParameters: UpdateVenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Venue>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venue/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VenueToJSON(requestParameters.venue),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueFromJSON(jsonValue));
    }

    /**
     * Update a venue in the database
     * Update a venues
     */
    async updateVenue(requestParameters: UpdateVenueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Venue> {
        const response = await this.updateVenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
