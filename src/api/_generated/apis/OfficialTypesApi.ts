/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OfficialType,
} from '../models/index';
import {
    OfficialTypeFromJSON,
    OfficialTypeToJSON,
} from '../models/index';

export interface AddOfficialTypeRequest {
    officialType?: OfficialType;
}

export interface DeleteOfficialTypeRequest {
    id?: string;
}

export interface FindOfficialTypeRequest {
    id?: string;
}

export interface SearchOfficialTypesRequest {
    page?: string;
    take?: string;
}

export interface UpdateOfficialTypeRequest {
    id?: string;
    officialType?: OfficialType;
}

/**
 * 
 */
export class OfficialTypesApi extends runtime.BaseAPI {

    /**
     * Add a new officialtype to the databsse
     * Add a officialtypes
     */
    async addOfficialTypeRaw(requestParameters: AddOfficialTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfficialType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/officialtype`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OfficialTypeToJSON(requestParameters.officialType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialTypeFromJSON(jsonValue));
    }

    /**
     * Add a new officialtype to the databsse
     * Add a officialtypes
     */
    async addOfficialType(requestParameters: AddOfficialTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfficialType> {
        const response = await this.addOfficialTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a officialtype from its database ID.
     * Delete a officialtype
     */
    async deleteOfficialTypeRaw(requestParameters: DeleteOfficialTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/officialtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a officialtype from its database ID.
     * Delete a officialtype
     */
    async deleteOfficialType(requestParameters: DeleteOfficialTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOfficialTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a officialtype from its database ID.
     * Get a officialtype
     */
    async findOfficialTypeRaw(requestParameters: FindOfficialTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfficialType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/officialtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialTypeFromJSON(jsonValue));
    }

    /**
     * Gets a officialtype from its database ID.
     * Get a officialtype
     */
    async findOfficialType(requestParameters: FindOfficialTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfficialType> {
        const response = await this.findOfficialTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for officialtypes paged
     * Search all officialtypes
     */
    async searchOfficialTypesRaw(requestParameters: SearchOfficialTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OfficialType>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/officialtype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfficialTypeFromJSON));
    }

    /**
     * Search for officialtypes paged
     * Search all officialtypes
     */
    async searchOfficialTypes(requestParameters: SearchOfficialTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OfficialType>> {
        const response = await this.searchOfficialTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a officialtype in the database
     * Update a officialtypes
     */
    async updateOfficialTypeRaw(requestParameters: UpdateOfficialTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OfficialType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/officialtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OfficialTypeToJSON(requestParameters.officialType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfficialTypeFromJSON(jsonValue));
    }

    /**
     * Update a officialtype in the database
     * Update a officialtypes
     */
    async updateOfficialType(requestParameters: UpdateOfficialTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OfficialType> {
        const response = await this.updateOfficialTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
