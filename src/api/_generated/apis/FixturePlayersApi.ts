/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FixturePlayer,
} from '../models/index';
import {
    FixturePlayerFromJSON,
    FixturePlayerToJSON,
} from '../models/index';

export interface AddFixturePlayerRequest {
    fixturePlayer?: FixturePlayer;
}

export interface DeleteFixturePlayerRequest {
    id?: string;
}

export interface FindFixturePlayerRequest {
    id?: string;
}

export interface SearchFixturePlayersRequest {
    page?: string;
    take?: string;
}

export interface UpdateFixturePlayerRequest {
    id?: string;
    fixturePlayer?: FixturePlayer;
}

/**
 * 
 */
export class FixturePlayersApi extends runtime.BaseAPI {

    /**
     * Add a new fixtureplayer to the databsse
     * Add a fixtureplayers
     */
    async addFixturePlayerRaw(requestParameters: AddFixturePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixturePlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureplayer`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FixturePlayerToJSON(requestParameters.fixturePlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixturePlayerFromJSON(jsonValue));
    }

    /**
     * Add a new fixtureplayer to the databsse
     * Add a fixtureplayers
     */
    async addFixturePlayer(requestParameters: AddFixturePlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixturePlayer> {
        const response = await this.addFixturePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a fixtureplayer from its database ID.
     * Delete a fixtureplayer
     */
    async deleteFixturePlayerRaw(requestParameters: DeleteFixturePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fixtureplayer from its database ID.
     * Delete a fixtureplayer
     */
    async deleteFixturePlayer(requestParameters: DeleteFixturePlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFixturePlayerRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a fixtureplayer from its database ID.
     * Get a fixtureplayer
     */
    async findFixturePlayerRaw(requestParameters: FindFixturePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixturePlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixturePlayerFromJSON(jsonValue));
    }

    /**
     * Gets a fixtureplayer from its database ID.
     * Get a fixtureplayer
     */
    async findFixturePlayer(requestParameters: FindFixturePlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixturePlayer> {
        const response = await this.findFixturePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fixtureplayers paged
     * Search all fixtureplayers
     */
    async searchFixturePlayersRaw(requestParameters: SearchFixturePlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FixturePlayer>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureplayer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FixturePlayerFromJSON));
    }

    /**
     * Search for fixtureplayers paged
     * Search all fixtureplayers
     */
    async searchFixturePlayers(requestParameters: SearchFixturePlayersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FixturePlayer>> {
        const response = await this.searchFixturePlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a fixtureplayer in the database
     * Update a fixtureplayers
     */
    async updateFixturePlayerRaw(requestParameters: UpdateFixturePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixturePlayer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureplayer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FixturePlayerToJSON(requestParameters.fixturePlayer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixturePlayerFromJSON(jsonValue));
    }

    /**
     * Update a fixtureplayer in the database
     * Update a fixtureplayers
     */
    async updateFixturePlayer(requestParameters: UpdateFixturePlayerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixturePlayer> {
        const response = await this.updateFixturePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
