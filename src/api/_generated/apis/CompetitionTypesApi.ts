/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompetitionType,
} from '../models/index';
import {
    CompetitionTypeFromJSON,
    CompetitionTypeToJSON,
} from '../models/index';

export interface AddCompetitionTypeRequest {
    competitionType?: CompetitionType;
}

export interface DeleteCompetitionTypeRequest {
    id?: string;
}

export interface FindCompetitionTypeRequest {
    id?: string;
}

export interface SearchCompetitionTypesRequest {
    page?: string;
    take?: string;
}

export interface UpdateCompetitionTypeRequest {
    id?: string;
    competitionType?: CompetitionType;
}

/**
 * 
 */
export class CompetitionTypesApi extends runtime.BaseAPI {

    /**
     * Add a new competitiontype to the databsse
     * Add a competitiontypes
     */
    async addCompetitionTypeRaw(requestParameters: AddCompetitionTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompetitionType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competitiontype`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionTypeToJSON(requestParameters.competitionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionTypeFromJSON(jsonValue));
    }

    /**
     * Add a new competitiontype to the databsse
     * Add a competitiontypes
     */
    async addCompetitionType(requestParameters: AddCompetitionTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompetitionType> {
        const response = await this.addCompetitionTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a competitiontype from its database ID.
     * Delete a competitiontype
     */
    async deleteCompetitionTypeRaw(requestParameters: DeleteCompetitionTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competitiontype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a competitiontype from its database ID.
     * Delete a competitiontype
     */
    async deleteCompetitionType(requestParameters: DeleteCompetitionTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCompetitionTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a competitiontype from its database ID.
     * Get a competitiontype
     */
    async findCompetitionTypeRaw(requestParameters: FindCompetitionTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompetitionType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competitiontype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionTypeFromJSON(jsonValue));
    }

    /**
     * Gets a competitiontype from its database ID.
     * Get a competitiontype
     */
    async findCompetitionType(requestParameters: FindCompetitionTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompetitionType> {
        const response = await this.findCompetitionTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for competitiontypes paged
     * Search all competitiontypes
     */
    async searchCompetitionTypesRaw(requestParameters: SearchCompetitionTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompetitionType>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competitiontype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompetitionTypeFromJSON));
    }

    /**
     * Search for competitiontypes paged
     * Search all competitiontypes
     */
    async searchCompetitionTypes(requestParameters: SearchCompetitionTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompetitionType>> {
        const response = await this.searchCompetitionTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a competitiontype in the database
     * Update a competitiontypes
     */
    async updateCompetitionTypeRaw(requestParameters: UpdateCompetitionTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompetitionType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competitiontype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionTypeToJSON(requestParameters.competitionType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionTypeFromJSON(jsonValue));
    }

    /**
     * Update a competitiontype in the database
     * Update a competitiontypes
     */
    async updateCompetitionType(requestParameters: UpdateCompetitionTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompetitionType> {
        const response = await this.updateCompetitionTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
