/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OffenceCode,
} from '../models/index';
import {
    OffenceCodeFromJSON,
    OffenceCodeToJSON,
} from '../models/index';

export interface AddOffenceCodeRequest {
    offenceCode?: OffenceCode;
}

export interface DeleteOffenceCodeRequest {
    id?: string;
}

export interface FindOffenceCodeRequest {
    id?: string;
}

export interface SearchOffenceCodesRequest {
    page?: string;
    take?: string;
}

export interface UpdateOffenceCodeRequest {
    id?: string;
    offenceCode?: OffenceCode;
}

/**
 * 
 */
export class OffenceCodesApi extends runtime.BaseAPI {

    /**
     * Add a new offencecode to the databsse
     * Add a offencecodes
     */
    async addOffenceCodeRaw(requestParameters: AddOffenceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OffenceCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/offencecode`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OffenceCodeToJSON(requestParameters.offenceCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OffenceCodeFromJSON(jsonValue));
    }

    /**
     * Add a new offencecode to the databsse
     * Add a offencecodes
     */
    async addOffenceCode(requestParameters: AddOffenceCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OffenceCode> {
        const response = await this.addOffenceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a offencecode from its database ID.
     * Delete a offencecode
     */
    async deleteOffenceCodeRaw(requestParameters: DeleteOffenceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/offencecode/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a offencecode from its database ID.
     * Delete a offencecode
     */
    async deleteOffenceCode(requestParameters: DeleteOffenceCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOffenceCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a offencecode from its database ID.
     * Get a offencecode
     */
    async findOffenceCodeRaw(requestParameters: FindOffenceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OffenceCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/offencecode/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OffenceCodeFromJSON(jsonValue));
    }

    /**
     * Gets a offencecode from its database ID.
     * Get a offencecode
     */
    async findOffenceCode(requestParameters: FindOffenceCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OffenceCode> {
        const response = await this.findOffenceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for offencecodes paged
     * Search all offencecodes
     */
    async searchOffenceCodesRaw(requestParameters: SearchOffenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OffenceCode>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/offencecode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OffenceCodeFromJSON));
    }

    /**
     * Search for offencecodes paged
     * Search all offencecodes
     */
    async searchOffenceCodes(requestParameters: SearchOffenceCodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OffenceCode>> {
        const response = await this.searchOffenceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a offencecode in the database
     * Update a offencecodes
     */
    async updateOffenceCodeRaw(requestParameters: UpdateOffenceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OffenceCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/offencecode/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OffenceCodeToJSON(requestParameters.offenceCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OffenceCodeFromJSON(jsonValue));
    }

    /**
     * Update a offencecode in the database
     * Update a offencecodes
     */
    async updateOffenceCode(requestParameters: UpdateOffenceCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OffenceCode> {
        const response = await this.updateOffenceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
