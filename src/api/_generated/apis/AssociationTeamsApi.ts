/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociationTeam,
} from '../models/index';
import {
    AssociationTeamFromJSON,
    AssociationTeamToJSON,
} from '../models/index';

export interface AddAssociationTeamRequest {
    associationTeam?: AssociationTeam;
}

export interface DeleteAssociationTeamRequest {
    id?: string;
}

export interface FindAssociationTeamRequest {
    id?: string;
}

export interface SearchAssociationTeamsRequest {
    page?: string;
    take?: string;
}

export interface UpdateAssociationTeamRequest {
    id?: string;
    associationTeam?: AssociationTeam;
}

/**
 * 
 */
export class AssociationTeamsApi extends runtime.BaseAPI {

    /**
     * Add a new associationteam to the databsse
     * Add a associationteams
     */
    async addAssociationTeamRaw(requestParameters: AddAssociationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationteam`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssociationTeamToJSON(requestParameters.associationTeam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationTeamFromJSON(jsonValue));
    }

    /**
     * Add a new associationteam to the databsse
     * Add a associationteams
     */
    async addAssociationTeam(requestParameters: AddAssociationTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationTeam> {
        const response = await this.addAssociationTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a associationteam from its database ID.
     * Delete a associationteam
     */
    async deleteAssociationTeamRaw(requestParameters: DeleteAssociationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a associationteam from its database ID.
     * Delete a associationteam
     */
    async deleteAssociationTeam(requestParameters: DeleteAssociationTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssociationTeamRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a associationteam from its database ID.
     * Get a associationteam
     */
    async findAssociationTeamRaw(requestParameters: FindAssociationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationTeamFromJSON(jsonValue));
    }

    /**
     * Gets a associationteam from its database ID.
     * Get a associationteam
     */
    async findAssociationTeam(requestParameters: FindAssociationTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationTeam> {
        const response = await this.findAssociationTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for associationteams paged
     * Search all associationteams
     */
    async searchAssociationTeamsRaw(requestParameters: SearchAssociationTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssociationTeam>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationteam`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssociationTeamFromJSON));
    }

    /**
     * Search for associationteams paged
     * Search all associationteams
     */
    async searchAssociationTeams(requestParameters: SearchAssociationTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssociationTeam>> {
        const response = await this.searchAssociationTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a associationteam in the database
     * Update a associationteams
     */
    async updateAssociationTeamRaw(requestParameters: UpdateAssociationTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociationTeam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/associationteam/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssociationTeamToJSON(requestParameters.associationTeam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociationTeamFromJSON(jsonValue));
    }

    /**
     * Update a associationteam in the database
     * Update a associationteams
     */
    async updateAssociationTeam(requestParameters: UpdateAssociationTeamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociationTeam> {
        const response = await this.updateAssociationTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
