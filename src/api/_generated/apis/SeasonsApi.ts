/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Season,
} from '../models/index';
import {
    SeasonFromJSON,
    SeasonToJSON,
} from '../models/index';

export interface AddSeasonRequest {
    season?: Season;
}

export interface DeleteSeasonRequest {
    id?: string;
}

export interface FindSeasonRequest {
    id?: string;
}

export interface SearchSeasonsRequest {
    page?: string;
    take?: string;
}

export interface UpdateSeasonRequest {
    id?: string;
    season?: Season;
}

/**
 * 
 */
export class SeasonsApi extends runtime.BaseAPI {

    /**
     * Add a new season to the databsse
     * Add a seasons
     */
    async addSeasonRaw(requestParameters: AddSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/season`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     * Add a new season to the databsse
     * Add a seasons
     */
    async addSeason(requestParameters: AddSeasonRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.addSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a season from its database ID.
     * Delete a season
     */
    async deleteSeasonRaw(requestParameters: DeleteSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/season/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a season from its database ID.
     * Delete a season
     */
    async deleteSeason(requestParameters: DeleteSeasonRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSeasonRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a season from its database ID.
     * Get a season
     */
    async findSeasonRaw(requestParameters: FindSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/season/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     * Gets a season from its database ID.
     * Get a season
     */
    async findSeason(requestParameters: FindSeasonRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.findSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for seasons paged
     * Search all seasons
     */
    async searchSeasonsRaw(requestParameters: SearchSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Season>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/season`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeasonFromJSON));
    }

    /**
     * Search for seasons paged
     * Search all seasons
     */
    async searchSeasons(requestParameters: SearchSeasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Season>> {
        const response = await this.searchSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a season in the database
     * Update a seasons
     */
    async updateSeasonRaw(requestParameters: UpdateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/season/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     * Update a season in the database
     * Update a seasons
     */
    async updateSeason(requestParameters: UpdateSeasonRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.updateSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
