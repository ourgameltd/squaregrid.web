/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FixtureEvent,
} from '../models/index';
import {
    FixtureEventFromJSON,
    FixtureEventToJSON,
} from '../models/index';

export interface AddFixtureEventRequest {
    fixtureEvent?: FixtureEvent;
}

export interface DeleteFixtureEventRequest {
    id?: string;
}

export interface FindFixtureEventRequest {
    id?: string;
}

export interface SearchFixtureEventsRequest {
    page?: string;
    take?: string;
}

export interface UpdateFixtureEventRequest {
    id?: string;
    fixtureEvent?: FixtureEvent;
}

/**
 * 
 */
export class FixtureEventsApi extends runtime.BaseAPI {

    /**
     * Add a new fixtureevent to the databsse
     * Add a fixtureevents
     */
    async addFixtureEventRaw(requestParameters: AddFixtureEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureEvent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureevent`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureEventToJSON(requestParameters.fixtureEvent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureEventFromJSON(jsonValue));
    }

    /**
     * Add a new fixtureevent to the databsse
     * Add a fixtureevents
     */
    async addFixtureEvent(requestParameters: AddFixtureEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureEvent> {
        const response = await this.addFixtureEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a fixtureevent from its database ID.
     * Delete a fixtureevent
     */
    async deleteFixtureEventRaw(requestParameters: DeleteFixtureEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureevent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a fixtureevent from its database ID.
     * Delete a fixtureevent
     */
    async deleteFixtureEvent(requestParameters: DeleteFixtureEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFixtureEventRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a fixtureevent from its database ID.
     * Get a fixtureevent
     */
    async findFixtureEventRaw(requestParameters: FindFixtureEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureEvent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureevent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureEventFromJSON(jsonValue));
    }

    /**
     * Gets a fixtureevent from its database ID.
     * Get a fixtureevent
     */
    async findFixtureEvent(requestParameters: FindFixtureEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureEvent> {
        const response = await this.findFixtureEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for fixtureevents paged
     * Search all fixtureevents
     */
    async searchFixtureEventsRaw(requestParameters: SearchFixtureEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FixtureEvent>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureevent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FixtureEventFromJSON));
    }

    /**
     * Search for fixtureevents paged
     * Search all fixtureevents
     */
    async searchFixtureEvents(requestParameters: SearchFixtureEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FixtureEvent>> {
        const response = await this.searchFixtureEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a fixtureevent in the database
     * Update a fixtureevents
     */
    async updateFixtureEventRaw(requestParameters: UpdateFixtureEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FixtureEvent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/fixtureevent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FixtureEventToJSON(requestParameters.fixtureEvent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FixtureEventFromJSON(jsonValue));
    }

    /**
     * Update a fixtureevent in the database
     * Update a fixtureevents
     */
    async updateFixtureEvent(requestParameters: UpdateFixtureEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FixtureEvent> {
        const response = await this.updateFixtureEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
