/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Competition,
} from '../models/index';
import {
    CompetitionFromJSON,
    CompetitionToJSON,
} from '../models/index';

export interface AddCompetitionRequest {
    competition?: Competition;
}

export interface DeleteCompetitionRequest {
    id?: string;
}

export interface FindCompetitionRequest {
    id?: string;
}

export interface SearchCompetitionsRequest {
    page?: string;
    take?: string;
}

export interface UpdateCompetitionRequest {
    id?: string;
    competition?: Competition;
}

/**
 * 
 */
export class CompetitionsApi extends runtime.BaseAPI {

    /**
     * Add a new competition to the databsse
     * Add a competitions
     */
    async addCompetitionRaw(requestParameters: AddCompetitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Competition>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competition`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionToJSON(requestParameters.competition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionFromJSON(jsonValue));
    }

    /**
     * Add a new competition to the databsse
     * Add a competitions
     */
    async addCompetition(requestParameters: AddCompetitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Competition> {
        const response = await this.addCompetitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a competition from its database ID.
     * Delete a competition
     */
    async deleteCompetitionRaw(requestParameters: DeleteCompetitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competition/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a competition from its database ID.
     * Delete a competition
     */
    async deleteCompetition(requestParameters: DeleteCompetitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCompetitionRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a competition from its database ID.
     * Get a competition
     */
    async findCompetitionRaw(requestParameters: FindCompetitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Competition>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competition/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionFromJSON(jsonValue));
    }

    /**
     * Gets a competition from its database ID.
     * Get a competition
     */
    async findCompetition(requestParameters: FindCompetitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Competition> {
        const response = await this.findCompetitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for competitions paged
     * Search all competitions
     */
    async searchCompetitionsRaw(requestParameters: SearchCompetitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Competition>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompetitionFromJSON));
    }

    /**
     * Search for competitions paged
     * Search all competitions
     */
    async searchCompetitions(requestParameters: SearchCompetitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Competition>> {
        const response = await this.searchCompetitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a competition in the database
     * Update a competitions
     */
    async updateCompetitionRaw(requestParameters: UpdateCompetitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Competition>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/competition/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionToJSON(requestParameters.competition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionFromJSON(jsonValue));
    }

    /**
     * Update a competition in the database
     * Update a competitions
     */
    async updateCompetition(requestParameters: UpdateCompetitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Competition> {
        const response = await this.updateCompetitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
