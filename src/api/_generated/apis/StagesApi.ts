/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Stage,
} from '../models/index';
import {
    StageFromJSON,
    StageToJSON,
} from '../models/index';

export interface AddStageRequest {
    stage?: Stage;
}

export interface DeleteStageRequest {
    id?: string;
}

export interface FindStageRequest {
    id?: string;
}

export interface SearchStagesRequest {
    page?: string;
    take?: string;
}

export interface UpdateStageRequest {
    id?: string;
    stage?: Stage;
}

/**
 * 
 */
export class StagesApi extends runtime.BaseAPI {

    /**
     * Add a new stage to the databsse
     * Add a stages
     */
    async addStageRaw(requestParameters: AddStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stage`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StageToJSON(requestParameters.stage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Add a new stage to the databsse
     * Add a stages
     */
    async addStage(requestParameters: AddStageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.addStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a stage from its database ID.
     * Delete a stage
     */
    async deleteStageRaw(requestParameters: DeleteStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a stage from its database ID.
     * Delete a stage
     */
    async deleteStage(requestParameters: DeleteStageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStageRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a stage from its database ID.
     * Get a stage
     */
    async findStageRaw(requestParameters: FindStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Gets a stage from its database ID.
     * Get a stage
     */
    async findStage(requestParameters: FindStageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.findStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for stages paged
     * Search all stages
     */
    async searchStagesRaw(requestParameters: SearchStagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Stage>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StageFromJSON));
    }

    /**
     * Search for stages paged
     * Search all stages
     */
    async searchStages(requestParameters: SearchStagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Stage>> {
        const response = await this.searchStagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a stage in the database
     * Update a stages
     */
    async updateStageRaw(requestParameters: UpdateStageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StageToJSON(requestParameters.stage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Update a stage in the database
     * Update a stages
     */
    async updateStage(requestParameters: UpdateStageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.updateStageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
