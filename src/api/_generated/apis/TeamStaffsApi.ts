/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TeamStaff,
} from '../models/index';
import {
    TeamStaffFromJSON,
    TeamStaffToJSON,
} from '../models/index';

export interface AddTeamStaffRequest {
    teamStaff?: TeamStaff;
}

export interface DeleteTeamStaffRequest {
    id?: string;
}

export interface FindTeamStaffRequest {
    id?: string;
}

export interface SearchTeamStaffsRequest {
    page?: string;
    take?: string;
}

export interface UpdateTeamStaffRequest {
    id?: string;
    teamStaff?: TeamStaff;
}

/**
 * 
 */
export class TeamStaffsApi extends runtime.BaseAPI {

    /**
     * Add a new teamstaff to the databsse
     * Add a teamstaffs
     */
    async addTeamStaffRaw(requestParameters: AddTeamStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamstaff`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamStaffToJSON(requestParameters.teamStaff),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamStaffFromJSON(jsonValue));
    }

    /**
     * Add a new teamstaff to the databsse
     * Add a teamstaffs
     */
    async addTeamStaff(requestParameters: AddTeamStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamStaff> {
        const response = await this.addTeamStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a teamstaff from its database ID.
     * Delete a teamstaff
     */
    async deleteTeamStaffRaw(requestParameters: DeleteTeamStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamstaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a teamstaff from its database ID.
     * Delete a teamstaff
     */
    async deleteTeamStaff(requestParameters: DeleteTeamStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamStaffRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a teamstaff from its database ID.
     * Get a teamstaff
     */
    async findTeamStaffRaw(requestParameters: FindTeamStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamstaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamStaffFromJSON(jsonValue));
    }

    /**
     * Gets a teamstaff from its database ID.
     * Get a teamstaff
     */
    async findTeamStaff(requestParameters: FindTeamStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamStaff> {
        const response = await this.findTeamStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for teamstaffs paged
     * Search all teamstaffs
     */
    async searchTeamStaffsRaw(requestParameters: SearchTeamStaffsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamStaff>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamstaff`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamStaffFromJSON));
    }

    /**
     * Search for teamstaffs paged
     * Search all teamstaffs
     */
    async searchTeamStaffs(requestParameters: SearchTeamStaffsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamStaff>> {
        const response = await this.searchTeamStaffsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a teamstaff in the database
     * Update a teamstaffs
     */
    async updateTeamStaffRaw(requestParameters: UpdateTeamStaffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamStaff>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["code"] = this.configuration.apiKey("code"); // function_key authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teamstaff/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamStaffToJSON(requestParameters.teamStaff),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamStaffFromJSON(jsonValue));
    }

    /**
     * Update a teamstaff in the database
     * Update a teamstaffs
     */
    async updateTeamStaff(requestParameters: UpdateTeamStaffRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamStaff> {
        const response = await this.updateTeamStaffRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
