/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';

/**
 * 
 * @export
 * @interface Club
 */
export interface Club {
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    badge?: string;
    /**
     * 
     * @type {Array<Team>}
     * @memberof Club
     */
    teams?: Array<Team>;
}

/**
 * Check if a given object implements the Club interface.
 */
export function instanceOfClub(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClubFromJSON(json: any): Club {
    return ClubFromJSONTyped(json, false);
}

export function ClubFromJSONTyped(json: any, ignoreDiscriminator: boolean): Club {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'badge': !exists(json, 'badge') ? undefined : json['badge'],
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamFromJSON)),
    };
}

export function ClubToJSON(value?: Club | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'shortName': value.shortName,
        'badge': value.badge,
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamToJSON)),
    };
}

