/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Fixture } from './Fixture';
import {
    FixtureFromJSON,
    FixtureFromJSONTyped,
    FixtureToJSON,
} from './Fixture';
import type { Official } from './Official';
import {
    OfficialFromJSON,
    OfficialFromJSONTyped,
    OfficialToJSON,
} from './Official';
import type { OfficialType } from './OfficialType';
import {
    OfficialTypeFromJSON,
    OfficialTypeFromJSONTyped,
    OfficialTypeToJSON,
} from './OfficialType';

/**
 * 
 * @export
 * @interface FixtureOfficialAppointment
 */
export interface FixtureOfficialAppointment {
    /**
     * 
     * @type {string}
     * @memberof FixtureOfficialAppointment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FixtureOfficialAppointment
     */
    officialId?: string;
    /**
     * 
     * @type {string}
     * @memberof FixtureOfficialAppointment
     */
    fixtureId?: string;
    /**
     * 
     * @type {string}
     * @memberof FixtureOfficialAppointment
     */
    officialTypeId?: string;
    /**
     * 
     * @type {number}
     * @memberof FixtureOfficialAppointment
     */
    officialAppointmentStatus?: number;
    /**
     * 
     * @type {Fixture}
     * @memberof FixtureOfficialAppointment
     */
    fixture?: Fixture;
    /**
     * 
     * @type {Official}
     * @memberof FixtureOfficialAppointment
     */
    official?: Official;
    /**
     * 
     * @type {OfficialType}
     * @memberof FixtureOfficialAppointment
     */
    officialType?: OfficialType;
}

/**
 * Check if a given object implements the FixtureOfficialAppointment interface.
 */
export function instanceOfFixtureOfficialAppointment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FixtureOfficialAppointmentFromJSON(json: any): FixtureOfficialAppointment {
    return FixtureOfficialAppointmentFromJSONTyped(json, false);
}

export function FixtureOfficialAppointmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): FixtureOfficialAppointment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'officialId': !exists(json, 'officialId') ? undefined : json['officialId'],
        'fixtureId': !exists(json, 'fixtureId') ? undefined : json['fixtureId'],
        'officialTypeId': !exists(json, 'officialTypeId') ? undefined : json['officialTypeId'],
        'officialAppointmentStatus': !exists(json, 'officialAppointmentStatus') ? undefined : json['officialAppointmentStatus'],
        'fixture': !exists(json, 'fixture') ? undefined : FixtureFromJSON(json['fixture']),
        'official': !exists(json, 'official') ? undefined : OfficialFromJSON(json['official']),
        'officialType': !exists(json, 'officialType') ? undefined : OfficialTypeFromJSON(json['officialType']),
    };
}

export function FixtureOfficialAppointmentToJSON(value?: FixtureOfficialAppointment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'officialId': value.officialId,
        'fixtureId': value.fixtureId,
        'officialTypeId': value.officialTypeId,
        'officialAppointmentStatus': value.officialAppointmentStatus,
        'fixture': FixtureToJSON(value.fixture),
        'official': OfficialToJSON(value.official),
        'officialType': OfficialTypeToJSON(value.officialType),
    };
}

