/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssociationStaff } from './AssociationStaff';
import {
    AssociationStaffFromJSON,
    AssociationStaffFromJSONTyped,
    AssociationStaffToJSON,
} from './AssociationStaff';
import type { Official } from './Official';
import {
    OfficialFromJSON,
    OfficialFromJSONTyped,
    OfficialToJSON,
} from './Official';
import type { TeamPlayer } from './TeamPlayer';
import {
    TeamPlayerFromJSON,
    TeamPlayerFromJSONTyped,
    TeamPlayerToJSON,
} from './TeamPlayer';
import type { TeamStaff } from './TeamStaff';
import {
    TeamStaffFromJSON,
    TeamStaffFromJSONTyped,
    TeamStaffToJSON,
} from './TeamStaff';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    forename?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    surname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    photo?: string;
    /**
     * 
     * @type {Array<AssociationStaff>}
     * @memberof User
     */
    associationStaffs?: Array<AssociationStaff>;
    /**
     * 
     * @type {Array<Official>}
     * @memberof User
     */
    officials?: Array<Official>;
    /**
     * 
     * @type {Array<TeamPlayer>}
     * @memberof User
     */
    teamPlayers?: Array<TeamPlayer>;
    /**
     * 
     * @type {Array<TeamStaff>}
     * @memberof User
     */
    teamStaffs?: Array<TeamStaff>;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forename': !exists(json, 'forename') ? undefined : json['forename'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'associationStaffs': !exists(json, 'associationStaffs') ? undefined : ((json['associationStaffs'] as Array<any>).map(AssociationStaffFromJSON)),
        'officials': !exists(json, 'officials') ? undefined : ((json['officials'] as Array<any>).map(OfficialFromJSON)),
        'teamPlayers': !exists(json, 'teamPlayers') ? undefined : ((json['teamPlayers'] as Array<any>).map(TeamPlayerFromJSON)),
        'teamStaffs': !exists(json, 'teamStaffs') ? undefined : ((json['teamStaffs'] as Array<any>).map(TeamStaffFromJSON)),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forename': value.forename,
        'surname': value.surname,
        'photo': value.photo,
        'associationStaffs': value.associationStaffs === undefined ? undefined : ((value.associationStaffs as Array<any>).map(AssociationStaffToJSON)),
        'officials': value.officials === undefined ? undefined : ((value.officials as Array<any>).map(OfficialToJSON)),
        'teamPlayers': value.teamPlayers === undefined ? undefined : ((value.teamPlayers as Array<any>).map(TeamPlayerToJSON)),
        'teamStaffs': value.teamStaffs === undefined ? undefined : ((value.teamStaffs as Array<any>).map(TeamStaffToJSON)),
    };
}

