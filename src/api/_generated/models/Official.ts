/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FixtureEvent } from './FixtureEvent';
import {
    FixtureEventFromJSON,
    FixtureEventFromJSONTyped,
    FixtureEventToJSON,
} from './FixtureEvent';
import type { FixtureOfficialAppointment } from './FixtureOfficialAppointment';
import {
    FixtureOfficialAppointmentFromJSON,
    FixtureOfficialAppointmentFromJSONTyped,
    FixtureOfficialAppointmentToJSON,
} from './FixtureOfficialAppointment';
import type { TeamFixtureResult } from './TeamFixtureResult';
import {
    TeamFixtureResultFromJSON,
    TeamFixtureResultFromJSONTyped,
    TeamFixtureResultToJSON,
} from './TeamFixtureResult';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Official
 */
export interface Official {
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    forename?: string;
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    surname?: string;
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    registrationData?: string;
    /**
     * 
     * @type {Date}
     * @memberof Official
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Official
     */
    toDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof Official
     */
    userId?: string;
    /**
     * 
     * @type {Array<FixtureEvent>}
     * @memberof Official
     */
    fixtureEvents?: Array<FixtureEvent>;
    /**
     * 
     * @type {Array<FixtureOfficialAppointment>}
     * @memberof Official
     */
    fixtureOfficialAppointments?: Array<FixtureOfficialAppointment>;
    /**
     * 
     * @type {Array<TeamFixtureResult>}
     * @memberof Official
     */
    teamFixtureResults?: Array<TeamFixtureResult>;
    /**
     * 
     * @type {User}
     * @memberof Official
     */
    user?: User;
}

/**
 * Check if a given object implements the Official interface.
 */
export function instanceOfOfficial(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OfficialFromJSON(json: any): Official {
    return OfficialFromJSONTyped(json, false);
}

export function OfficialFromJSONTyped(json: any, ignoreDiscriminator: boolean): Official {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forename': !exists(json, 'forename') ? undefined : json['forename'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'registrationData': !exists(json, 'registrationData') ? undefined : json['registrationData'],
        'fromDate': !exists(json, 'fromDate') ? undefined : (new Date(json['fromDate'])),
        'toDate': !exists(json, 'toDate') ? undefined : (json['toDate'] === null ? null : new Date(json['toDate'])),
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'fixtureEvents': !exists(json, 'fixtureEvents') ? undefined : ((json['fixtureEvents'] as Array<any>).map(FixtureEventFromJSON)),
        'fixtureOfficialAppointments': !exists(json, 'fixtureOfficialAppointments') ? undefined : ((json['fixtureOfficialAppointments'] as Array<any>).map(FixtureOfficialAppointmentFromJSON)),
        'teamFixtureResults': !exists(json, 'teamFixtureResults') ? undefined : ((json['teamFixtureResults'] as Array<any>).map(TeamFixtureResultFromJSON)),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function OfficialToJSON(value?: Official | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forename': value.forename,
        'surname': value.surname,
        'registrationData': value.registrationData,
        'fromDate': value.fromDate === undefined ? undefined : (value.fromDate.toISOString()),
        'toDate': value.toDate === undefined ? undefined : (value.toDate === null ? null : value.toDate.toISOString()),
        'photo': value.photo,
        'userId': value.userId,
        'fixtureEvents': value.fixtureEvents === undefined ? undefined : ((value.fixtureEvents as Array<any>).map(FixtureEventToJSON)),
        'fixtureOfficialAppointments': value.fixtureOfficialAppointments === undefined ? undefined : ((value.fixtureOfficialAppointments as Array<any>).map(FixtureOfficialAppointmentToJSON)),
        'teamFixtureResults': value.teamFixtureResults === undefined ? undefined : ((value.teamFixtureResults as Array<any>).map(TeamFixtureResultToJSON)),
        'user': UserToJSON(value.user),
    };
}

