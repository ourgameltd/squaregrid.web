/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FixtureEvent } from './FixtureEvent';
import {
    FixtureEventFromJSON,
    FixtureEventFromJSONTyped,
    FixtureEventToJSON,
} from './FixtureEvent';
import type { FixtureStaff } from './FixtureStaff';
import {
    FixtureStaffFromJSON,
    FixtureStaffFromJSONTyped,
    FixtureStaffToJSON,
} from './FixtureStaff';
import type { StaffType } from './StaffType';
import {
    StaffTypeFromJSON,
    StaffTypeFromJSONTyped,
    StaffTypeToJSON,
} from './StaffType';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface TeamStaff
 */
export interface TeamStaff {
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    forename?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    surname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamStaff
     */
    admin?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof TeamStaff
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeamStaff
     */
    toDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    teamId?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStaff
     */
    staffTypeId?: string;
    /**
     * 
     * @type {Array<FixtureEvent>}
     * @memberof TeamStaff
     */
    fixtureEvents?: Array<FixtureEvent>;
    /**
     * 
     * @type {Array<FixtureStaff>}
     * @memberof TeamStaff
     */
    fixtureStaffs?: Array<FixtureStaff>;
    /**
     * 
     * @type {StaffType}
     * @memberof TeamStaff
     */
    staffType?: StaffType;
    /**
     * 
     * @type {Team}
     * @memberof TeamStaff
     */
    team?: Team;
    /**
     * 
     * @type {User}
     * @memberof TeamStaff
     */
    user?: User;
}

/**
 * Check if a given object implements the TeamStaff interface.
 */
export function instanceOfTeamStaff(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamStaffFromJSON(json: any): TeamStaff {
    return TeamStaffFromJSONTyped(json, false);
}

export function TeamStaffFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamStaff {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forename': !exists(json, 'forename') ? undefined : json['forename'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'fromDate': !exists(json, 'fromDate') ? undefined : (new Date(json['fromDate'])),
        'toDate': !exists(json, 'toDate') ? undefined : (json['toDate'] === null ? null : new Date(json['toDate'])),
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'teamId': !exists(json, 'teamId') ? undefined : json['teamId'],
        'staffTypeId': !exists(json, 'staffTypeId') ? undefined : json['staffTypeId'],
        'fixtureEvents': !exists(json, 'fixtureEvents') ? undefined : ((json['fixtureEvents'] as Array<any>).map(FixtureEventFromJSON)),
        'fixtureStaffs': !exists(json, 'fixtureStaffs') ? undefined : ((json['fixtureStaffs'] as Array<any>).map(FixtureStaffFromJSON)),
        'staffType': !exists(json, 'staffType') ? undefined : StaffTypeFromJSON(json['staffType']),
        'team': !exists(json, 'team') ? undefined : TeamFromJSON(json['team']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function TeamStaffToJSON(value?: TeamStaff | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forename': value.forename,
        'surname': value.surname,
        'admin': value.admin,
        'fromDate': value.fromDate === undefined ? undefined : (value.fromDate.toISOString()),
        'toDate': value.toDate === undefined ? undefined : (value.toDate === null ? null : value.toDate.toISOString()),
        'photo': value.photo,
        'userId': value.userId,
        'teamId': value.teamId,
        'staffTypeId': value.staffTypeId,
        'fixtureEvents': value.fixtureEvents === undefined ? undefined : ((value.fixtureEvents as Array<any>).map(FixtureEventToJSON)),
        'fixtureStaffs': value.fixtureStaffs === undefined ? undefined : ((value.fixtureStaffs as Array<any>).map(FixtureStaffToJSON)),
        'staffType': StaffTypeToJSON(value.staffType),
        'team': TeamToJSON(value.team),
        'user': UserToJSON(value.user),
    };
}

