/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Fixture } from './Fixture';
import {
    FixtureFromJSON,
    FixtureFromJSONTyped,
    FixtureToJSON,
} from './Fixture';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';
import type { TeamFixtureResult } from './TeamFixtureResult';
import {
    TeamFixtureResultFromJSON,
    TeamFixtureResultFromJSONTyped,
    TeamFixtureResultToJSON,
} from './TeamFixtureResult';
import type { VenueType } from './VenueType';
import {
    VenueTypeFromJSON,
    VenueTypeFromJSONTyped,
    VenueTypeToJSON,
} from './VenueType';

/**
 * 
 * @export
 * @interface Venue
 */
export interface Venue {
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof Venue
     */
    venueTypeId?: string;
    /**
     * 
     * @type {Array<Fixture>}
     * @memberof Venue
     */
    fixtures?: Array<Fixture>;
    /**
     * 
     * @type {Array<TeamFixtureResult>}
     * @memberof Venue
     */
    teamFixtureResults?: Array<TeamFixtureResult>;
    /**
     * 
     * @type {Array<Team>}
     * @memberof Venue
     */
    teams?: Array<Team>;
    /**
     * 
     * @type {VenueType}
     * @memberof Venue
     */
    venueType?: VenueType;
}

/**
 * Check if a given object implements the Venue interface.
 */
export function instanceOfVenue(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VenueFromJSON(json: any): Venue {
    return VenueFromJSONTyped(json, false);
}

export function VenueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Venue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'venueTypeId': !exists(json, 'venueTypeId') ? undefined : json['venueTypeId'],
        'fixtures': !exists(json, 'fixtures') ? undefined : ((json['fixtures'] as Array<any>).map(FixtureFromJSON)),
        'teamFixtureResults': !exists(json, 'teamFixtureResults') ? undefined : ((json['teamFixtureResults'] as Array<any>).map(TeamFixtureResultFromJSON)),
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamFromJSON)),
        'venueType': !exists(json, 'venueType') ? undefined : VenueTypeFromJSON(json['venueType']),
    };
}

export function VenueToJSON(value?: Venue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'shortName': value.shortName,
        'venueTypeId': value.venueTypeId,
        'fixtures': value.fixtures === undefined ? undefined : ((value.fixtures as Array<any>).map(FixtureToJSON)),
        'teamFixtureResults': value.teamFixtureResults === undefined ? undefined : ((value.teamFixtureResults as Array<any>).map(TeamFixtureResultToJSON)),
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamToJSON)),
        'venueType': VenueTypeToJSON(value.venueType),
    };
}

