/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Association } from './Association';
import {
    AssociationFromJSON,
    AssociationFromJSONTyped,
    AssociationToJSON,
} from './Association';
import type { CompetitionSeason } from './CompetitionSeason';
import {
    CompetitionSeasonFromJSON,
    CompetitionSeasonFromJSONTyped,
    CompetitionSeasonToJSON,
} from './CompetitionSeason';

/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Season
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Season
     */
    endDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    associationId?: string;
    /**
     * 
     * @type {Association}
     * @memberof Season
     */
    association?: Association;
    /**
     * 
     * @type {Array<CompetitionSeason>}
     * @memberof Season
     */
    competitionSeasons?: Array<CompetitionSeason>;
}

/**
 * Check if a given object implements the Season interface.
 */
export function instanceOfSeason(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SeasonFromJSON(json: any): Season {
    return SeasonFromJSONTyped(json, false);
}

export function SeasonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Season {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'associationId': !exists(json, 'associationId') ? undefined : json['associationId'],
        'association': !exists(json, 'association') ? undefined : AssociationFromJSON(json['association']),
        'competitionSeasons': !exists(json, 'competitionSeasons') ? undefined : ((json['competitionSeasons'] as Array<any>).map(CompetitionSeasonFromJSON)),
    };
}

export function SeasonToJSON(value?: Season | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'name': value.name,
        'associationId': value.associationId,
        'association': AssociationToJSON(value.association),
        'competitionSeasons': value.competitionSeasons === undefined ? undefined : ((value.competitionSeasons as Array<any>).map(CompetitionSeasonToJSON)),
    };
}

