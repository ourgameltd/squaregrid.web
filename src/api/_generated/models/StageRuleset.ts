/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Stage } from './Stage';
import {
    StageFromJSON,
    StageFromJSONTyped,
    StageToJSON,
} from './Stage';

/**
 * 
 * @export
 * @interface StageRuleset
 */
export interface StageRuleset {
    /**
     * 
     * @type {string}
     * @memberof StageRuleset
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StageRuleset
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    periods?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    etPeriods?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StageRuleset
     */
    penalties?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    periodDuration?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    etPeriodDuration?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    numberStarting?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    numberSubs?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    pointsWin?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    pointsDraw?: number;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    pointsLoss?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StageRuleset
     */
    headToHead?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StageRuleset
     */
    numberTrialists?: number;
    /**
     * 
     * @type {Array<Stage>}
     * @memberof StageRuleset
     */
    stages?: Array<Stage>;
}

/**
 * Check if a given object implements the StageRuleset interface.
 */
export function instanceOfStageRuleset(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StageRulesetFromJSON(json: any): StageRuleset {
    return StageRulesetFromJSONTyped(json, false);
}

export function StageRulesetFromJSONTyped(json: any, ignoreDiscriminator: boolean): StageRuleset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'periods': !exists(json, 'periods') ? undefined : json['periods'],
        'etPeriods': !exists(json, 'etPeriods') ? undefined : json['etPeriods'],
        'penalties': !exists(json, 'penalties') ? undefined : json['penalties'],
        'periodDuration': !exists(json, 'periodDuration') ? undefined : json['periodDuration'],
        'etPeriodDuration': !exists(json, 'etPeriodDuration') ? undefined : json['etPeriodDuration'],
        'numberStarting': !exists(json, 'numberStarting') ? undefined : json['numberStarting'],
        'numberSubs': !exists(json, 'numberSubs') ? undefined : json['numberSubs'],
        'pointsWin': !exists(json, 'pointsWin') ? undefined : json['pointsWin'],
        'pointsDraw': !exists(json, 'pointsDraw') ? undefined : json['pointsDraw'],
        'pointsLoss': !exists(json, 'pointsLoss') ? undefined : json['pointsLoss'],
        'headToHead': !exists(json, 'headToHead') ? undefined : json['headToHead'],
        'numberTrialists': !exists(json, 'numberTrialists') ? undefined : json['numberTrialists'],
        'stages': !exists(json, 'stages') ? undefined : ((json['stages'] as Array<any>).map(StageFromJSON)),
    };
}

export function StageRulesetToJSON(value?: StageRuleset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'periods': value.periods,
        'etPeriods': value.etPeriods,
        'penalties': value.penalties,
        'periodDuration': value.periodDuration,
        'etPeriodDuration': value.etPeriodDuration,
        'numberStarting': value.numberStarting,
        'numberSubs': value.numberSubs,
        'pointsWin': value.pointsWin,
        'pointsDraw': value.pointsDraw,
        'pointsLoss': value.pointsLoss,
        'headToHead': value.headToHead,
        'numberTrialists': value.numberTrialists,
        'stages': value.stages === undefined ? undefined : ((value.stages as Array<any>).map(StageToJSON)),
    };
}

