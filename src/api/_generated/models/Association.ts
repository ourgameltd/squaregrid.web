/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssociationStaff } from './AssociationStaff';
import {
    AssociationStaffFromJSON,
    AssociationStaffFromJSONTyped,
    AssociationStaffToJSON,
} from './AssociationStaff';
import type { AssociationTeam } from './AssociationTeam';
import {
    AssociationTeamFromJSON,
    AssociationTeamFromJSONTyped,
    AssociationTeamToJSON,
} from './AssociationTeam';
import type { Competition } from './Competition';
import {
    CompetitionFromJSON,
    CompetitionFromJSONTyped,
    CompetitionToJSON,
} from './Competition';
import type { Season } from './Season';
import {
    SeasonFromJSON,
    SeasonFromJSONTyped,
    SeasonToJSON,
} from './Season';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';

/**
 * 
 * @export
 * @interface Association
 */
export interface Association {
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof Association
     */
    badge?: string;
    /**
     * 
     * @type {Array<AssociationStaff>}
     * @memberof Association
     */
    associationStaffs?: Array<AssociationStaff>;
    /**
     * 
     * @type {Array<AssociationTeam>}
     * @memberof Association
     */
    associationTeams?: Array<AssociationTeam>;
    /**
     * 
     * @type {Array<Competition>}
     * @memberof Association
     */
    competitions?: Array<Competition>;
    /**
     * 
     * @type {Array<Season>}
     * @memberof Association
     */
    seasons?: Array<Season>;
    /**
     * 
     * @type {Array<Team>}
     * @memberof Association
     */
    teams?: Array<Team>;
}

/**
 * Check if a given object implements the Association interface.
 */
export function instanceOfAssociation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AssociationFromJSON(json: any): Association {
    return AssociationFromJSONTyped(json, false);
}

export function AssociationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Association {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'badge': !exists(json, 'badge') ? undefined : json['badge'],
        'associationStaffs': !exists(json, 'associationStaffs') ? undefined : ((json['associationStaffs'] as Array<any>).map(AssociationStaffFromJSON)),
        'associationTeams': !exists(json, 'associationTeams') ? undefined : ((json['associationTeams'] as Array<any>).map(AssociationTeamFromJSON)),
        'competitions': !exists(json, 'competitions') ? undefined : ((json['competitions'] as Array<any>).map(CompetitionFromJSON)),
        'seasons': !exists(json, 'seasons') ? undefined : ((json['seasons'] as Array<any>).map(SeasonFromJSON)),
        'teams': !exists(json, 'teams') ? undefined : ((json['teams'] as Array<any>).map(TeamFromJSON)),
    };
}

export function AssociationToJSON(value?: Association | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'shortName': value.shortName,
        'badge': value.badge,
        'associationStaffs': value.associationStaffs === undefined ? undefined : ((value.associationStaffs as Array<any>).map(AssociationStaffToJSON)),
        'associationTeams': value.associationTeams === undefined ? undefined : ((value.associationTeams as Array<any>).map(AssociationTeamToJSON)),
        'competitions': value.competitions === undefined ? undefined : ((value.competitions as Array<any>).map(CompetitionToJSON)),
        'seasons': value.seasons === undefined ? undefined : ((value.seasons as Array<any>).map(SeasonToJSON)),
        'teams': value.teams === undefined ? undefined : ((value.teams as Array<any>).map(TeamToJSON)),
    };
}

