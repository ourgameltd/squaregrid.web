/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FixtureEvent } from './FixtureEvent';
import {
    FixtureEventFromJSON,
    FixtureEventFromJSONTyped,
    FixtureEventToJSON,
} from './FixtureEvent';
import type { FixturePlayer } from './FixturePlayer';
import {
    FixturePlayerFromJSON,
    FixturePlayerFromJSONTyped,
    FixturePlayerToJSON,
} from './FixturePlayer';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface TeamPlayer
 */
export interface TeamPlayer {
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    forename?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    surname?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    photo?: string;
    /**
     * 
     * @type {Date}
     * @memberof TeamPlayer
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeamPlayer
     */
    toDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof TeamPlayer
     */
    squadNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamPlayer
     */
    teamId?: string;
    /**
     * 
     * @type {Array<FixtureEvent>}
     * @memberof TeamPlayer
     */
    fixtureEventPlayerOffs?: Array<FixtureEvent>;
    /**
     * 
     * @type {Array<FixtureEvent>}
     * @memberof TeamPlayer
     */
    fixtureEventPlayers?: Array<FixtureEvent>;
    /**
     * 
     * @type {Array<FixturePlayer>}
     * @memberof TeamPlayer
     */
    fixturePlayers?: Array<FixturePlayer>;
    /**
     * 
     * @type {Team}
     * @memberof TeamPlayer
     */
    team?: Team;
    /**
     * 
     * @type {User}
     * @memberof TeamPlayer
     */
    user?: User;
}

/**
 * Check if a given object implements the TeamPlayer interface.
 */
export function instanceOfTeamPlayer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamPlayerFromJSON(json: any): TeamPlayer {
    return TeamPlayerFromJSONTyped(json, false);
}

export function TeamPlayerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamPlayer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forename': !exists(json, 'forename') ? undefined : json['forename'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'fromDate': !exists(json, 'fromDate') ? undefined : (new Date(json['fromDate'])),
        'toDate': !exists(json, 'toDate') ? undefined : (json['toDate'] === null ? null : new Date(json['toDate'])),
        'squadNumber': !exists(json, 'squadNumber') ? undefined : json['squadNumber'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'teamId': !exists(json, 'teamId') ? undefined : json['teamId'],
        'fixtureEventPlayerOffs': !exists(json, 'fixtureEventPlayerOffs') ? undefined : ((json['fixtureEventPlayerOffs'] as Array<any>).map(FixtureEventFromJSON)),
        'fixtureEventPlayers': !exists(json, 'fixtureEventPlayers') ? undefined : ((json['fixtureEventPlayers'] as Array<any>).map(FixtureEventFromJSON)),
        'fixturePlayers': !exists(json, 'fixturePlayers') ? undefined : ((json['fixturePlayers'] as Array<any>).map(FixturePlayerFromJSON)),
        'team': !exists(json, 'team') ? undefined : TeamFromJSON(json['team']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function TeamPlayerToJSON(value?: TeamPlayer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forename': value.forename,
        'surname': value.surname,
        'photo': value.photo,
        'fromDate': value.fromDate === undefined ? undefined : (value.fromDate.toISOString()),
        'toDate': value.toDate === undefined ? undefined : (value.toDate === null ? null : value.toDate.toISOString()),
        'squadNumber': value.squadNumber,
        'userId': value.userId,
        'teamId': value.teamId,
        'fixtureEventPlayerOffs': value.fixtureEventPlayerOffs === undefined ? undefined : ((value.fixtureEventPlayerOffs as Array<any>).map(FixtureEventToJSON)),
        'fixtureEventPlayers': value.fixtureEventPlayers === undefined ? undefined : ((value.fixtureEventPlayers as Array<any>).map(FixtureEventToJSON)),
        'fixturePlayers': value.fixturePlayers === undefined ? undefined : ((value.fixturePlayers as Array<any>).map(FixturePlayerToJSON)),
        'team': TeamToJSON(value.team),
        'user': UserToJSON(value.user),
    };
}

