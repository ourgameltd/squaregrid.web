/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Association } from './Association';
import {
    AssociationFromJSON,
    AssociationFromJSONTyped,
    AssociationToJSON,
} from './Association';
import type { AssociationTeam } from './AssociationTeam';
import {
    AssociationTeamFromJSON,
    AssociationTeamFromJSONTyped,
    AssociationTeamToJSON,
} from './AssociationTeam';
import type { Club } from './Club';
import {
    ClubFromJSON,
    ClubFromJSONTyped,
    ClubToJSON,
} from './Club';
import type { Fixture } from './Fixture';
import {
    FixtureFromJSON,
    FixtureFromJSONTyped,
    FixtureToJSON,
} from './Fixture';
import type { StageTeam } from './StageTeam';
import {
    StageTeamFromJSON,
    StageTeamFromJSONTyped,
    StageTeamToJSON,
} from './StageTeam';
import type { TeamFixtureResult } from './TeamFixtureResult';
import {
    TeamFixtureResultFromJSON,
    TeamFixtureResultFromJSONTyped,
    TeamFixtureResultToJSON,
} from './TeamFixtureResult';
import type { TeamPlayer } from './TeamPlayer';
import {
    TeamPlayerFromJSON,
    TeamPlayerFromJSONTyped,
    TeamPlayerToJSON,
} from './TeamPlayer';
import type { TeamStaff } from './TeamStaff';
import {
    TeamStaffFromJSON,
    TeamStaffFromJSONTyped,
    TeamStaffToJSON,
} from './TeamStaff';
import type { Venue } from './Venue';
import {
    VenueFromJSON,
    VenueFromJSONTyped,
    VenueToJSON,
} from './Venue';

/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    colours?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    badge?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    clubId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    venueId?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    associationId?: string | null;
    /**
     * 
     * @type {Association}
     * @memberof Team
     */
    association?: Association;
    /**
     * 
     * @type {Array<AssociationTeam>}
     * @memberof Team
     */
    associationTeams?: Array<AssociationTeam>;
    /**
     * 
     * @type {Club}
     * @memberof Team
     */
    club?: Club;
    /**
     * 
     * @type {Array<Fixture>}
     * @memberof Team
     */
    fixtureAwayTeams?: Array<Fixture>;
    /**
     * 
     * @type {Array<Fixture>}
     * @memberof Team
     */
    fixtureHomeTeams?: Array<Fixture>;
    /**
     * 
     * @type {Array<StageTeam>}
     * @memberof Team
     */
    stageTeams?: Array<StageTeam>;
    /**
     * 
     * @type {Array<TeamFixtureResult>}
     * @memberof Team
     */
    teamFixtureResultAways?: Array<TeamFixtureResult>;
    /**
     * 
     * @type {Array<TeamFixtureResult>}
     * @memberof Team
     */
    teamFixtureResultHomes?: Array<TeamFixtureResult>;
    /**
     * 
     * @type {Array<TeamPlayer>}
     * @memberof Team
     */
    teamPlayers?: Array<TeamPlayer>;
    /**
     * 
     * @type {Array<TeamStaff>}
     * @memberof Team
     */
    teamStaffs?: Array<TeamStaff>;
    /**
     * 
     * @type {Venue}
     * @memberof Team
     */
    venue?: Venue;
}

/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'colours': !exists(json, 'colours') ? undefined : json['colours'],
        'badge': !exists(json, 'badge') ? undefined : json['badge'],
        'clubId': !exists(json, 'clubId') ? undefined : json['clubId'],
        'venueId': !exists(json, 'venueId') ? undefined : json['venueId'],
        'associationId': !exists(json, 'associationId') ? undefined : json['associationId'],
        'association': !exists(json, 'association') ? undefined : AssociationFromJSON(json['association']),
        'associationTeams': !exists(json, 'associationTeams') ? undefined : ((json['associationTeams'] as Array<any>).map(AssociationTeamFromJSON)),
        'club': !exists(json, 'club') ? undefined : ClubFromJSON(json['club']),
        'fixtureAwayTeams': !exists(json, 'fixtureAwayTeams') ? undefined : ((json['fixtureAwayTeams'] as Array<any>).map(FixtureFromJSON)),
        'fixtureHomeTeams': !exists(json, 'fixtureHomeTeams') ? undefined : ((json['fixtureHomeTeams'] as Array<any>).map(FixtureFromJSON)),
        'stageTeams': !exists(json, 'stageTeams') ? undefined : ((json['stageTeams'] as Array<any>).map(StageTeamFromJSON)),
        'teamFixtureResultAways': !exists(json, 'teamFixtureResultAways') ? undefined : ((json['teamFixtureResultAways'] as Array<any>).map(TeamFixtureResultFromJSON)),
        'teamFixtureResultHomes': !exists(json, 'teamFixtureResultHomes') ? undefined : ((json['teamFixtureResultHomes'] as Array<any>).map(TeamFixtureResultFromJSON)),
        'teamPlayers': !exists(json, 'teamPlayers') ? undefined : ((json['teamPlayers'] as Array<any>).map(TeamPlayerFromJSON)),
        'teamStaffs': !exists(json, 'teamStaffs') ? undefined : ((json['teamStaffs'] as Array<any>).map(TeamStaffFromJSON)),
        'venue': !exists(json, 'venue') ? undefined : VenueFromJSON(json['venue']),
    };
}

export function TeamToJSON(value?: Team | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'shortName': value.shortName,
        'colours': value.colours,
        'badge': value.badge,
        'clubId': value.clubId,
        'venueId': value.venueId,
        'associationId': value.associationId,
        'association': AssociationToJSON(value.association),
        'associationTeams': value.associationTeams === undefined ? undefined : ((value.associationTeams as Array<any>).map(AssociationTeamToJSON)),
        'club': ClubToJSON(value.club),
        'fixtureAwayTeams': value.fixtureAwayTeams === undefined ? undefined : ((value.fixtureAwayTeams as Array<any>).map(FixtureToJSON)),
        'fixtureHomeTeams': value.fixtureHomeTeams === undefined ? undefined : ((value.fixtureHomeTeams as Array<any>).map(FixtureToJSON)),
        'stageTeams': value.stageTeams === undefined ? undefined : ((value.stageTeams as Array<any>).map(StageTeamToJSON)),
        'teamFixtureResultAways': value.teamFixtureResultAways === undefined ? undefined : ((value.teamFixtureResultAways as Array<any>).map(TeamFixtureResultToJSON)),
        'teamFixtureResultHomes': value.teamFixtureResultHomes === undefined ? undefined : ((value.teamFixtureResultHomes as Array<any>).map(TeamFixtureResultToJSON)),
        'teamPlayers': value.teamPlayers === undefined ? undefined : ((value.teamPlayers as Array<any>).map(TeamPlayerToJSON)),
        'teamStaffs': value.teamStaffs === undefined ? undefined : ((value.teamStaffs as Array<any>).map(TeamStaffToJSON)),
        'venue': VenueToJSON(value.venue),
    };
}

