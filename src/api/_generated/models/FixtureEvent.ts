/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Fixture } from './Fixture';
import {
    FixtureFromJSON,
    FixtureFromJSONTyped,
    FixtureToJSON,
} from './Fixture';
import type { OffenceCode } from './OffenceCode';
import {
    OffenceCodeFromJSON,
    OffenceCodeFromJSONTyped,
    OffenceCodeToJSON,
} from './OffenceCode';
import type { Official } from './Official';
import {
    OfficialFromJSON,
    OfficialFromJSONTyped,
    OfficialToJSON,
} from './Official';
import type { TeamPlayer } from './TeamPlayer';
import {
    TeamPlayerFromJSON,
    TeamPlayerFromJSONTyped,
    TeamPlayerToJSON,
} from './TeamPlayer';
import type { TeamStaff } from './TeamStaff';
import {
    TeamStaffFromJSON,
    TeamStaffFromJSONTyped,
    TeamStaffToJSON,
} from './TeamStaff';

/**
 * 
 * @export
 * @interface FixtureEvent
 */
export interface FixtureEvent {
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof FixtureEvent
     */
    dateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    offenceCodeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    fixtureId?: string;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    officialId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    staffId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    playerId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FixtureEvent
     */
    playerOffId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FixtureEvent
     */
    eventType?: number;
    /**
     * 
     * @type {Fixture}
     * @memberof FixtureEvent
     */
    fixture?: Fixture;
    /**
     * 
     * @type {OffenceCode}
     * @memberof FixtureEvent
     */
    offenceCode?: OffenceCode;
    /**
     * 
     * @type {Official}
     * @memberof FixtureEvent
     */
    official?: Official;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof FixtureEvent
     */
    player?: TeamPlayer;
    /**
     * 
     * @type {TeamPlayer}
     * @memberof FixtureEvent
     */
    playerOff?: TeamPlayer;
    /**
     * 
     * @type {TeamStaff}
     * @memberof FixtureEvent
     */
    staff?: TeamStaff;
}

/**
 * Check if a given object implements the FixtureEvent interface.
 */
export function instanceOfFixtureEvent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FixtureEventFromJSON(json: any): FixtureEvent {
    return FixtureEventFromJSONTyped(json, false);
}

export function FixtureEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): FixtureEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateTime': !exists(json, 'dateTime') ? undefined : (new Date(json['dateTime'])),
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'offenceCodeId': !exists(json, 'offenceCodeId') ? undefined : json['offenceCodeId'],
        'fixtureId': !exists(json, 'fixtureId') ? undefined : json['fixtureId'],
        'officialId': !exists(json, 'officialId') ? undefined : json['officialId'],
        'staffId': !exists(json, 'staffId') ? undefined : json['staffId'],
        'playerId': !exists(json, 'playerId') ? undefined : json['playerId'],
        'playerOffId': !exists(json, 'playerOffId') ? undefined : json['playerOffId'],
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'fixture': !exists(json, 'fixture') ? undefined : FixtureFromJSON(json['fixture']),
        'offenceCode': !exists(json, 'offenceCode') ? undefined : OffenceCodeFromJSON(json['offenceCode']),
        'official': !exists(json, 'official') ? undefined : OfficialFromJSON(json['official']),
        'player': !exists(json, 'player') ? undefined : TeamPlayerFromJSON(json['player']),
        'playerOff': !exists(json, 'playerOff') ? undefined : TeamPlayerFromJSON(json['playerOff']),
        'staff': !exists(json, 'staff') ? undefined : TeamStaffFromJSON(json['staff']),
    };
}

export function FixtureEventToJSON(value?: FixtureEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'dateTime': value.dateTime === undefined ? undefined : (value.dateTime.toISOString()),
        'reason': value.reason,
        'offenceCodeId': value.offenceCodeId,
        'fixtureId': value.fixtureId,
        'officialId': value.officialId,
        'staffId': value.staffId,
        'playerId': value.playerId,
        'playerOffId': value.playerOffId,
        'eventType': value.eventType,
        'fixture': FixtureToJSON(value.fixture),
        'offenceCode': OffenceCodeToJSON(value.offenceCode),
        'official': OfficialToJSON(value.official),
        'player': TeamPlayerToJSON(value.player),
        'playerOff': TeamPlayerToJSON(value.playerOff),
        'staff': TeamStaffToJSON(value.staff),
    };
}

