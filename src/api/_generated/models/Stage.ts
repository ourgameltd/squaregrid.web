/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompetitionSeason } from './CompetitionSeason';
import {
    CompetitionSeasonFromJSON,
    CompetitionSeasonFromJSONTyped,
    CompetitionSeasonToJSON,
} from './CompetitionSeason';
import type { Fixture } from './Fixture';
import {
    FixtureFromJSON,
    FixtureFromJSONTyped,
    FixtureToJSON,
} from './Fixture';
import type { StageRuleset } from './StageRuleset';
import {
    StageRulesetFromJSON,
    StageRulesetFromJSONTyped,
    StageRulesetToJSON,
} from './StageRuleset';
import type { StageTeam } from './StageTeam';
import {
    StageTeamFromJSON,
    StageTeamFromJSONTyped,
    StageTeamToJSON,
} from './StageTeam';

/**
 * 
 * @export
 * @interface Stage
 */
export interface Stage {
    /**
     * 
     * @type {string}
     * @memberof Stage
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Stage
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Stage
     */
    competitionSeasonId?: string;
    /**
     * 
     * @type {string}
     * @memberof Stage
     */
    stageRulesetId?: string;
    /**
     * 
     * @type {CompetitionSeason}
     * @memberof Stage
     */
    competitionSeason?: CompetitionSeason;
    /**
     * 
     * @type {Array<Fixture>}
     * @memberof Stage
     */
    fixtures?: Array<Fixture>;
    /**
     * 
     * @type {StageRuleset}
     * @memberof Stage
     */
    stageRuleset?: StageRuleset;
    /**
     * 
     * @type {Array<StageTeam>}
     * @memberof Stage
     */
    stageTeams?: Array<StageTeam>;
}

/**
 * Check if a given object implements the Stage interface.
 */
export function instanceOfStage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StageFromJSON(json: any): Stage {
    return StageFromJSONTyped(json, false);
}

export function StageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Stage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'competitionSeasonId': !exists(json, 'competitionSeasonId') ? undefined : json['competitionSeasonId'],
        'stageRulesetId': !exists(json, 'stageRulesetId') ? undefined : json['stageRulesetId'],
        'competitionSeason': !exists(json, 'competitionSeason') ? undefined : CompetitionSeasonFromJSON(json['competitionSeason']),
        'fixtures': !exists(json, 'fixtures') ? undefined : ((json['fixtures'] as Array<any>).map(FixtureFromJSON)),
        'stageRuleset': !exists(json, 'stageRuleset') ? undefined : StageRulesetFromJSON(json['stageRuleset']),
        'stageTeams': !exists(json, 'stageTeams') ? undefined : ((json['stageTeams'] as Array<any>).map(StageTeamFromJSON)),
    };
}

export function StageToJSON(value?: Stage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'competitionSeasonId': value.competitionSeasonId,
        'stageRulesetId': value.stageRulesetId,
        'competitionSeason': CompetitionSeasonToJSON(value.competitionSeason),
        'fixtures': value.fixtures === undefined ? undefined : ((value.fixtures as Array<any>).map(FixtureToJSON)),
        'stageRuleset': StageRulesetToJSON(value.stageRuleset),
        'stageTeams': value.stageTeams === undefined ? undefined : ((value.stageTeams as Array<any>).map(StageTeamToJSON)),
    };
}

