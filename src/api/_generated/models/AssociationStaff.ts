/* tslint:disable */
/* eslint-disable */
/**
 * Our Game Api
 * Api calls and message processing functions for the Our Game app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Association } from './Association';
import {
    AssociationFromJSON,
    AssociationFromJSONTyped,
    AssociationToJSON,
} from './Association';
import type { AssociationStaffType } from './AssociationStaffType';
import {
    AssociationStaffTypeFromJSON,
    AssociationStaffTypeFromJSONTyped,
    AssociationStaffTypeToJSON,
} from './AssociationStaffType';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface AssociationStaff
 */
export interface AssociationStaff {
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    forename?: string;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    surname?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssociationStaff
     */
    admin?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof AssociationStaff
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AssociationStaff
     */
    toDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    associationId?: string;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof AssociationStaff
     */
    associationStaffTypeId?: string;
    /**
     * 
     * @type {Association}
     * @memberof AssociationStaff
     */
    association?: Association;
    /**
     * 
     * @type {AssociationStaffType}
     * @memberof AssociationStaff
     */
    associationStaffType?: AssociationStaffType;
    /**
     * 
     * @type {User}
     * @memberof AssociationStaff
     */
    user?: User;
}

/**
 * Check if a given object implements the AssociationStaff interface.
 */
export function instanceOfAssociationStaff(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AssociationStaffFromJSON(json: any): AssociationStaff {
    return AssociationStaffFromJSONTyped(json, false);
}

export function AssociationStaffFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssociationStaff {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forename': !exists(json, 'forename') ? undefined : json['forename'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'fromDate': !exists(json, 'fromDate') ? undefined : (new Date(json['fromDate'])),
        'toDate': !exists(json, 'toDate') ? undefined : (json['toDate'] === null ? null : new Date(json['toDate'])),
        'photo': !exists(json, 'photo') ? undefined : json['photo'],
        'associationId': !exists(json, 'associationId') ? undefined : json['associationId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'associationStaffTypeId': !exists(json, 'associationStaffTypeId') ? undefined : json['associationStaffTypeId'],
        'association': !exists(json, 'association') ? undefined : AssociationFromJSON(json['association']),
        'associationStaffType': !exists(json, 'associationStaffType') ? undefined : AssociationStaffTypeFromJSON(json['associationStaffType']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function AssociationStaffToJSON(value?: AssociationStaff | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forename': value.forename,
        'surname': value.surname,
        'admin': value.admin,
        'fromDate': value.fromDate === undefined ? undefined : (value.fromDate.toISOString()),
        'toDate': value.toDate === undefined ? undefined : (value.toDate === null ? null : value.toDate.toISOString()),
        'photo': value.photo,
        'associationId': value.associationId,
        'userId': value.userId,
        'associationStaffTypeId': value.associationStaffTypeId,
        'association': AssociationToJSON(value.association),
        'associationStaffType': AssociationStaffTypeToJSON(value.associationStaffType),
        'user': UserToJSON(value.user),
    };
}

